import { drizzle } from 'drizzle-orm/better-sqlite3';
import { eq, lt } from 'drizzle-orm';
import Database from 'better-sqlite3';
import * as schema from '../src/lib/server/db/schema.js';

const sqlite = new Database('./drizzle.db');
const db = drizzle(sqlite, { schema });

async function cleanupSessions() {
	try {
		console.log('üßπ Starting session cleanup...');

		// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏
		const allSessions = await db.select().from(schema.sessions);
		console.log(`üìä Total sessions before cleanup: ${allSessions.length}`);

		// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å "—Å—Ç–∞—Ä—ã–µ" —Å–µ—Å—Å–∏–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
		const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);
		const oldSessions = allSessions.filter(session => session.expiresAt < oneDayAgo);

		console.log(`‚è∞ Sessions older than 24 hours: ${oldSessions.length}`);

		if (oldSessions.length > 0) {
			// –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
			console.log('üóëÔ∏è Deleting old sessions...');

			for (const session of oldSessions) {
				await db.delete(schema.sessions).where(eq(schema.sessions.id, session.id));
			}

			console.log(`‚úÖ Deleted ${oldSessions.length} old sessions`);
		} else {
			console.log('‚ÑπÔ∏è No old sessions to delete');
		}

		// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ—Å—Å–∏–π
		const remainingSessions = await db.select().from(schema.sessions);
		console.log(`üìä Sessions after cleanup: ${remainingSessions.length}`);

		// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
		const userStats = {};
		remainingSessions.forEach(session => {
			userStats[session.userId] = (userStats[session.userId] || 0) + 1;
		});

		console.log('\nüë• Remaining sessions per user:');
		Object.entries(userStats).forEach(([userId, count]) => {
			console.log(`   User ${userId}: ${count} sessions`);
		});

		// –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ 5 —Å–µ—Å—Å–∏–π, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 5 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö
		const maxSessionsPerUser = 5;

		for (const [userId, count] of Object.entries(userStats)) {
			if (count > maxSessionsPerUser) {
				console.log(`\nüîß User ${userId} has ${count} sessions, keeping only ${maxSessionsPerUser} most recent...`);

				// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ expiresAt (—Å–≤–µ–∂–∏–µ –≤ –∫–æ–Ω—Ü–µ)
				const userSessions = remainingSessions
					.filter(session => session.userId === userId)
					.sort((a, b) => a.expiresAt - b.expiresAt);

				// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö maxSessionsPerUser
				const sessionsToDelete = userSessions.slice(0, count - maxSessionsPerUser);

				for (const session of sessionsToDelete) {
					await db.delete(schema.sessions).where(eq(schema.sessions.id, session.id));
				}

				console.log(`‚úÖ Deleted ${sessionsToDelete.length} excess sessions for user ${userId}`);
			}
		}

		// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
		const finalSessions = await db.select().from(schema.sessions);
		console.log(`\nüéâ Final session count: ${finalSessions.length}`);

		const finalUserStats = {};
		finalSessions.forEach(session => {
			finalUserStats[session.userId] = (finalUserStats[session.userId] || 0) + 1;
		});

		console.log('\nüë• Final sessions per user:');
		Object.entries(finalUserStats).forEach(([userId, count]) => {
			console.log(`   User ${userId}: ${count} sessions`);
		});

	} catch (error) {
		console.error('‚ùå Error during session cleanup:', error);
	} finally {
		sqlite.close();
	}
}

cleanupSessions();
