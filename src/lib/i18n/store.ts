import { writable, derived } from 'svelte/store';
import { browser } from '$app/environment';
import type { SupportedLocale, LocaleConfig, PageMeta } from './types';
import { SUPPORTED_LOCALES, DEFAULT_LOCALE } from './types';
import { initI18n, changeLanguage, getCurrentLanguage, t } from './index';
import { getLocaleConfig, getAvailableLocales, createMetaTags } from './utils';
import i18next from 'i18next';

// Store –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏
export const currentLocale = writable<SupportedLocale>(DEFAULT_LOCALE);

// Store –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ i18n
export const i18nReady = writable<boolean>(false);

// Derived store –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏
export const currentLocaleConfig = derived(
	currentLocale,
	($currentLocale) => SUPPORTED_LOCALES[$currentLocale]
);

// Derived store –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π
export const availableLocales = derived(currentLocale, ($currentLocale) =>
	Object.values(SUPPORTED_LOCALES).filter((locale) => locale.code !== $currentLocale)
);

// Store –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π)
export const translations = derived([currentLocale, i18nReady], ([$currentLocale, $i18nReady]) => {
	if (!$i18nReady) return {};

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏
	const tForLocale = (key: string, options?: any) => {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º i18next –Ω–∞–ø—Ä—è–º—É—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–∫–∞–ª—å—é
		const i18nextLocale = $currentLocale === 'uk-ua' ? 'uk' : $currentLocale;
		let result = i18next.t(key, { ...options, lng: i18nextLocale });

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é —Å ${}
		if (options) {
			Object.keys(options).forEach((key) => {
				result = result.replace(new RegExp(`\\$\\{${key}\\}`, 'g'), options[key]);
			});
		}

		return result;
	};

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
	return {
		t: tForLocale,
		locale: $currentLocale,
		config: SUPPORTED_LOCALES[$currentLocale]
	};
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è i18n —Å–∏—Å—Ç–µ–º—ã
export async function initializeI18n(initialLocale?: SupportedLocale): Promise<void> {
	try {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é
		let locale: SupportedLocale = initialLocale || DEFAULT_LOCALE;

		if (browser && !initialLocale) {
			const savedLocale = localStorage.getItem('i18nextLng');
			locale = savedLocale && isValidLocale(savedLocale) ? savedLocale : DEFAULT_LOCALE;
		}

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º i18next
		await initI18n(locale);

		// –û–±–Ω–æ–≤–ª—è–µ–º stores
		currentLocale.set(locale);
		i18nReady.set(true);

		console.log(`üåç I18n initialized with locale: ${locale}`);
		console.log(`üìù Translation test:`, t('products.search.results_info', { count: 5, total: 10 }));
	} catch (error) {
		console.error('‚ùå Failed to initialize i18n:', error);
		// Fallback –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –ª–æ–∫–∞–ª–∏
		currentLocale.set(DEFAULT_LOCALE);
		i18nReady.set(false);
	}
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ (–ø—Ä–æ—Å—Ç–æ–µ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL)
export async function switchLocale(newLocale: SupportedLocale): Promise<void> {
	try {
		// –ú–µ–Ω—è–µ–º —è–∑—ã–∫ –≤ i18next
		await changeLanguage(newLocale);

		// –û–±–Ω–æ–≤–ª—è–µ–º store
		currentLocale.set(newLocale);

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
		if (browser) {
			localStorage.setItem('i18nextLng', newLocale);
		}

		console.log(`üîÑ Switched to locale: ${newLocale}`);
	} catch (error) {
		console.error('‚ùå Failed to switch locale:', error);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export function createPageTranslations() {
	return derived([translations, i18nReady], ([$translations, $i18nReady]) => {
		if (!$i18nReady || !$translations.t) {
			return null;
		}

		const { t, locale } = $translations;

		return {
			// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
			t,
			locale,

			// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
			getMeta: (pageKey: string): PageMeta => ({
				title: t(`${pageKey}.meta.title`),
				description: t(`${pageKey}.meta.description`),
				keywords: t(`${pageKey}.meta.keywords`, { defaultValue: '' })
			}),

			// –ü—Ä–æ—Å—Ç—ã–µ SEO –º–µ—Ç–∞-—Ç–µ–≥–∏
			getSEOTags: (pageKey: string, baseUrl?: string) => {
				const meta = {
					title: t(`${pageKey}.meta.title`),
					description: t(`${pageKey}.meta.description`)
				};

				return createMetaTags(locale, meta.title, meta.description, baseUrl);
			}
		};
	});
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞–ª—å—é (–¥–ª—è URL-based routing)
export function createPageTranslationsForLocale(targetLocale: SupportedLocale) {
	return derived([translations, i18nReady], ([$translations, $i18nReady]) => {
		if (!$i18nReady || !$translations.t) {
			return null;
		}

		// –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞–ª–∏
		const tForLocale = (key: string, options?: any) => {
			// –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
			if (targetLocale === 'en') {
				return i18next.t(key, { ...options, lng: 'en' });
			}
			// –î–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
			else if (targetLocale === 'uk-ua') {
				return i18next.t(key, { ...options, lng: 'uk' });
			}
			// Fallback
			return i18next.t(key, options);
		};

		return {
			// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
			t: tForLocale,
			locale: targetLocale,

			// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
			getMeta: (pageKey: string): PageMeta => ({
				title: tForLocale(`${pageKey}.meta.title`),
				description: tForLocale(`${pageKey}.meta.description`),
				keywords: tForLocale(`${pageKey}.meta.keywords`, { defaultValue: '' })
			}),

			// –ü—Ä–æ—Å—Ç—ã–µ SEO –º–µ—Ç–∞-—Ç–µ–≥–∏
			getSEOTags: (pageKey: string, baseUrl?: string) => {
				const meta = {
					title: tForLocale(`${pageKey}.meta.title`),
					description: tForLocale(`${pageKey}.meta.description`)
				};

				return createMetaTags(targetLocale, meta.title, meta.description, baseUrl);
			}
		};
	});
}

// –†–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export function createTranslator() {
	return derived(translations, ($translations) => $translations.t || ((key: string) => key));
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª–∏
function isValidLocale(locale: string): locale is SupportedLocale {
	return locale in SUPPORTED_LOCALES;
}
