// node-telegram-bot-api does not have bundled types, so we import as below to avoid lint errors
// If @types/node-telegram-bot-api is not available, add a custom .d.ts file as a fallback
// See: https://github.com/yagop/node-telegram-bot-api/issues/319
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import TelegramBot from 'node-telegram-bot-api';
import { OrderService } from '../application/services/order.service';
import { GoogleSheetsService } from './google-sheets.service';
import type { Order, OrderStatus } from '../domain/interfaces/order.interface';
import { readFileSync, writeFileSync } from 'fs';
import { join } from 'path';

interface UserState {
	awaitingOrderId: boolean;
	awaitingTTN?: boolean;
	action?: 'confirm' | 'cancel' | 'ship' | 'deliver';
	orderId?: string;
}

export class TelegramBotService {
	private bot: TelegramBot;
	private orderService: OrderService;
	private sheetsService: GoogleSheetsService;
	private adminChatId: string | null = null;
	private userStates: Map<number, UserState> = new Map();

	constructor(autoStartPolling = false) {
		const botToken =
			process.env.TELEGRAM_BOT_TOKEN || '8343800455:AAGk9NjKvopbJoGsRfl-Tkv3Rg9kh4qqDfI';

		if (!botToken) {
			throw new Error('TELEGRAM_BOT_TOKEN is required. Please set it in .env file');
		}

		this.bot = new TelegramBot(botToken, { polling: false }); // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ-polling
		this.orderService = new OrderService();
		this.sheetsService = new GoogleSheetsService();

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π adminChatId
		this.loadAdminChatId();

		this.setupCommands();
		this.setupCallbacks();
		this.setupTextHandler();

		// –ó–∞–ø—É—Å–∫–∞–µ–º polling —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
		if (autoStartPolling) {
			this.startPolling();
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ polling –≤—Ä—É—á–Ω—É—é
	startPolling(): void {
		console.log('[TelegramBot] Starting polling manually...');
		this.bot.startPolling();
	}

	private setupCommands(): void {
		// –ö–æ–º–∞–Ω–¥–∞ /start
		this.bot.onText(/\/start/, (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			if (username !== 'qq5756853') {
				this.bot.sendMessage(
					chatId,
					'‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
				);
				console.log(`[TelegramBot] Access denied for user: @${username} (ID: ${msg.from?.id})`);
				return;
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º adminChatId –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
			if (!this.adminChatId) {
				this.setAdminChatId(chatId.toString());
				console.log(`[TelegramBot] Admin chat ID set: ${chatId} for user @${username}`);
			}

			const welcomeMessage = `
ü§ñ *Balance Botanica Order Management Bot*

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

üöÄ *–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:*
			`;

			const mainMenu = {
				inline_keyboard: [
					[
						{ text: '‚è≥ –û—á—ñ–∫—É—é—Ç—å', callback_data: 'status_pending' },
						{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ', callback_data: 'status_confirmed' }
					],
					[
						{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ', callback_data: 'status_shipped' },
						{ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ', callback_data: 'status_delivered' }
					],
					[
						{ text: '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω—ñ', callback_data: 'status_cancelled' },
						{ text: 'üìã –í—Å—ñ –∑–∞–∫–∞–∑–∏', callback_data: 'all_orders' }
					]
				]
			};

			this.bot.sendMessage(chatId, welcomeMessage, {
				parse_mode: 'Markdown',
				reply_markup: mainMenu
			});
		});

		// –ö–æ–º–∞–Ω–¥–∞ /help
		this.bot.onText(/\/help/, (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
				return;
			}

			const helpMessage = `
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

üîπ /orders - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
üîπ /pending - –ó–∞–∫–∞–∑—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
üîπ /confirmed - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
üîπ /shipped - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
üîπ /delivered - –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
üîπ /cancelled - –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã

üîπ /status [ID] [—Å—Ç–∞—Ç—É—Å] - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
   *–ü—Ä–∏–º–µ—Ä—ã:*
   \`/status 123456 confirmed\`
   \`/status 123456 shipped\`
   \`/status 123456 delivered\`

üìä *–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:*
‚Ä¢ pending - –û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
‚Ä¢ confirmed - –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ
‚Ä¢ shipped - –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
‚Ä¢ delivered - –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
‚Ä¢ cancelled - –°–∫–∞—Å–æ–≤–∞–Ω–æ

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å Google Sheets
‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
			`;

			this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
		});

		// –ö–æ–º–∞–Ω–¥–∞ /orders - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
		this.bot.onText(/\/orders/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
				return;
			}

			await this.sendOrdersList(chatId);
		});

		// –ö–æ–º–∞–Ω–¥—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
		this.bot.onText(/\/pending/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
				return;
			}

			await this.sendOrdersByStatus(chatId, 'pending');
		});

		this.bot.onText(/\/confirmed/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
				return;
			}

			await this.sendOrdersByStatus(chatId, 'confirmed');
		});

		this.bot.onText(/\/shipped/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
				return;
			}

			await this.sendOrdersByStatus(chatId, 'shipped');
		});

		this.bot.onText(/\/delivered/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
				return;
			}

			await this.sendOrdersByStatus(chatId, 'delivered');
		});

		this.bot.onText(/\/cancelled/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
				return;
			}

			await this.sendOrdersByStatus(chatId, 'cancelled');
		});

		// –ö–æ–º–∞–Ω–¥–∞ /status –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
		this.bot.onText(
			/\/status (.+)/,
			async (msg: TelegramBot.Message, match: RegExpExecArray | null) => {
				const chatId = msg.chat.id;
				const username = msg.from?.username;

				if (username !== 'qq5756853') {
					this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
					return;
				}

				const params = match?.[1]?.split(' ');

				if (!params || params.length !== 2) {
					this.bot.sendMessage(
						chatId,
						'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /status [ID] [—Å—Ç–∞—Ç—É—Å]'
					);
					return;
				}

				const [orderId, newStatus] = params;
				await this.updateOrderStatus(chatId, orderId, newStatus as OrderStatus);
			}
		);

		// –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
		this.bot.onText(/\/cancel/, (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
				return;
			}

			this.userStates.delete(chatId);
			this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
		});
	}

	private setupCallbacks(): void {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
		this.bot.on('callback_query', async (query: TelegramBot.CallbackQuery) => {
			const chatId = query.message?.chat.id;
			const data = query.data;
			const username = query.from?.username;

			if (!chatId || !data) return;

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
			if (username !== 'qq5756853') {
				this.bot.answerCallbackQuery(query.id, { text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
				return;
			}

			// –†–∞–∑–±–æ—Ä callback data
			const parts = data.split('_');
			const action = parts[0];
			const param1 = parts[1];
			const param2 = parts[2];

			try {
				switch (action) {
					// –ú–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤
					case 'status':
						await this.sendOrdersByStatus(chatId, param1 as OrderStatus);
						break;
					case 'all':
						if (param1 === 'orders') {
							await this.sendOrdersList(chatId);
						}
						break;

					// –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏
					case 'confirm':
						await this.updateOrderStatus(chatId, param1, 'confirmed');
						break;
					case 'ship':
						// –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¢–¢–ù
						this.userStates.set(chatId, {
							awaitingOrderId: false,
							awaitingTTN: true,
							action: 'ship',
							orderId: param1
						});

						const cancelKeyboard = {
							inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_operation' }]]
						};
						this.bot.sendMessage(
							chatId,
							`üì¶ –í–≤–µ–¥—ñ—Ç—å –¢–¢–ù –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${param1}:`,
							{
								reply_markup: cancelKeyboard
							}
						);
						break;
					case 'deliver':
						await this.updateOrderStatus(chatId, param1, 'delivered');
						break;
					case 'cancel':
						await this.updateOrderStatus(chatId, param1, 'cancelled');
						break;
					case 'details':
						await this.sendOrderDetails(chatId, param1);
						break;

					// –ù–∞–≤–∏–≥–∞—Ü–∏—è
					case 'back':
					case 'menu':
						await this.sendMainMenu(chatId);
						break;
					case 'refresh':
						if (param1 === 'orders') {
							await this.sendOrdersList(chatId);
						}
						break;

					// –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏
					case 'action':
						await this.handleOrderAction(chatId, param1);
						break;

					// –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
					case 'cancel':
						if (param1 === 'operation') {
							this.userStates.delete(chatId);
							this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
							await this.sendOrdersList(chatId);
						}
						break;
				}

				// –£–±—Ä–∞—Ç—å loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
				this.bot.answerCallbackQuery(query.id);
			} catch (error) {
				console.error('Callback query error:', error);
				this.bot.answerCallbackQuery(query.id, { text: '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è' });
			}
		});
	}

	private setupTextHandler(): void {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ ID –∑–∞–∫–∞–∑–∞ –∏ –¢–¢–ù
		this.bot.on('message', async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const text = msg.text;
			const username = msg.from?.username;

			if (!text) return;

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
			if (username !== 'qq5756853') {
				return; // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			}

			if (!this.adminChatId || chatId.toString() !== this.adminChatId) {
				return;
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const userState = this.userStates.get(chatId);
			if (!userState) return;

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç –¢–¢–ù
			if (userState.awaitingTTN && userState.orderId) {
				await this.processTTN(chatId, text.trim(), userState.orderId);
				return;
			}

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç ID –∑–∞–∫–∞–∑–∞
			if (userState.awaitingOrderId && userState.action) {
				await this.processOrderId(chatId, text.trim(), userState.action);
				return;
			}
		});
	}

	private async handleOrderAction(chatId: number, action: string): Promise<void> {
		const actionMap = {
			confirm: '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
			cancel: '—Å–∫–∞—Å—É–≤–∞—Ç–∏',
			ship: '–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏',
			deliver: '–ø–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π'
		};

		const actionText = actionMap[action as keyof typeof actionMap] || action;

		this.userStates.set(chatId, {
			awaitingOrderId: true,
			action: action as 'confirm' | 'cancel' | 'ship' | 'deliver'
		});

		const cancelKeyboard = {
			inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_operation' }]]
		};
		this.bot.sendMessage(chatId, `üìù –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–∫–∞–∑–∞ –¥–ª—è ${actionText}:`, {
			reply_markup: cancelKeyboard
		});
	}

	private async processOrderId(
		chatId: number,
		orderId: string,
		action: 'confirm' | 'cancel' | 'ship' | 'deliver'
	): Promise<void> {
		try {
			// –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¢–¢–ù
			if (action === 'ship') {
				this.userStates.set(chatId, {
					awaitingOrderId: false,
					awaitingTTN: true,
					action: 'ship',
					orderId: orderId
				});

				const cancelKeyboard = {
					inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_operation' }]]
				};
				this.bot.sendMessage(
					chatId,
					`üì¶ –í–≤–µ–¥—ñ—Ç—å –¢–¢–ù –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}:`,
					{
						reply_markup: cancelKeyboard
					}
				);
				return;
			}

			// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
			this.userStates.delete(chatId);

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
			const statusMap = {
				confirm: 'confirmed' as OrderStatus,
				cancel: 'cancelled' as OrderStatus,
				ship: 'shipped' as OrderStatus,
				deliver: 'delivered' as OrderStatus
			};

			const newStatus = statusMap[action];
			await this.updateOrderStatus(chatId, orderId, newStatus);
		} catch (error) {
			console.error('Failed to process order ID:', error);
			this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
			this.userStates.delete(chatId);
		}
	}

	private async processTTN(chatId: number, ttn: string, orderId: string): Promise<void> {
		try {
			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			this.userStates.delete(chatId);

			// –í–∞–ª–∏–¥–∞—Ü–∏—è –¢–¢–ù (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–∑ 14 —Ü–∏—Ñ—Ä)
			if (!/^\d{14}$/.test(ttn)) {
				this.bot.sendMessage(chatId, '‚ùå –¢–¢–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 14 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
				return;
			}

			console.log(`[TelegramBot] Shipping order ${orderId} with TTN: ${ttn}`);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ shipped
			await this.updateOrderStatus(chatId, orderId, 'shipped');

			// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¢–¢–ù —Å Google Sheets
			try {
				await this.sheetsService.updateOrderTTN(orderId, ttn);
				console.log(`[TelegramBot] TTN ${ttn} synced to Google Sheets for order ${orderId}`);
			} catch (sheetsError) {
				console.error('[TelegramBot] Failed to sync TTN to Google Sheets:', sheetsError);
				// –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –¢–¢–ù
			this.bot.sendMessage(
				chatId,
				`‚úÖ –ó–∞–∫–∞–∑ ${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π!\n\nüì¶ –¢–¢–ù: ${ttn}\n\n–ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏.`
			);
		} catch (error) {
			console.error('Failed to process TTN:', error);
			this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¢–¢–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
		}
	}

	private async sendOrdersList(chatId: number): Promise<void> {
		try {
			this.bot.sendMessage(chatId, 'üì¶ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–∫–∞–∑—ã...');

			// –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const orders = await this.getAllOrdersForAdmin();

			if (orders.length === 0) {
				const emptyMessage = 'üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤';
				const emptyKeyboard = {
					inline_keyboard: [
						[
							{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'action_confirm' },
							{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'action_cancel' }
						],
						[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_menu' }]
					]
				};

				this.bot.sendMessage(chatId, emptyMessage, { reply_markup: emptyKeyboard });
				return;
			}

			let message = `üìã *–í—Å–µ –∑–∞–∫–∞–∑—ã (${orders.length}):*\n\n`;

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
			for (const order of orders) {
				message += this.formatOrderDetailedSummary(order);
			}

			// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
			const inlineKeyboard = {
				inline_keyboard: [
					[
						{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'action_confirm' },
						{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'action_cancel' }
					],
					[
						{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'action_ship' },
						{ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', callback_data: 'action_deliver' }
					],
					[
						{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_orders' },
						{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_menu' }
					]
				]
			};

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: inlineKeyboard
			});
		} catch (error) {
			console.error('Failed to send orders list:', error);
			this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
		}
	}

	// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	private async getAllOrdersForAdmin(): Promise<Order[]> {
		try {
			console.log('[TelegramBot] Getting all orders for admin...');
			// –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
			const orders = await this.orderService.getAllOrders();
			console.log(`[TelegramBot] Retrieved ${orders.length} orders from database`);
			orders.forEach((order, index) => {
				console.log(
					`[TelegramBot] Order ${index + 1}: ID=${order.id}, Status=${order.status}, User=${order.userId}`
				);
			});
			return orders;
		} catch (error) {
			console.error('[TelegramBot] Failed to get all orders for admin:', error);
			return [];
		}
	}

	private async sendOrdersByStatus(chatId: number, status: OrderStatus): Promise<void> {
		try {
			const orders = await this.getAllOrdersForAdmin();
			const filteredOrders = orders.filter((order) => order.status === status);

			if (filteredOrders.length === 0) {
				const emptyMessage = `üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${this.getStatusText(status)}"`;
				const emptyKeyboard = {
					inline_keyboard: [
						[
							{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'action_confirm' },
							{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'action_cancel' }
						],
						[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_menu' }]
					]
				};

				this.bot.sendMessage(chatId, emptyMessage, { reply_markup: emptyKeyboard });
				return;
			}

			let message = `üìã *–ó–∞–∫–∞–∑—ã "${this.getStatusText(status)}" (${filteredOrders.length}):*\n\n`;

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
			for (const order of filteredOrders) {
				message += this.formatOrderDetailedSummary(order);
			}

			// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
			const inlineKeyboard = {
				inline_keyboard: [
					[
						{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'action_confirm' },
						{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'action_cancel' }
					],
					[
						{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'action_ship' },
						{ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', callback_data: 'action_deliver' }
					],
					[
						{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_orders' },
						{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_menu' }
					]
				]
			};

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: inlineKeyboard
			});
		} catch (error) {
			console.error('Failed to send orders by status:', error);
			this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
		}
	}

	private async updateOrderStatus(
		chatId: number,
		orderId: string,
		status: OrderStatus
	): Promise<void> {
		try {
			console.log(`[TelegramBot] Starting order status update: ${orderId} -> ${status}`);

			// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –ë–î
			const success = await this.orderService.updateOrderStatus(orderId, status);
			console.log(`[TelegramBot] OrderService.updateOrderStatus result: ${success}`);

			if (!success) {
				console.log(`[TelegramBot] OrderService returned false for order ${orderId}`);
				this.bot.sendMessage(chatId, `‚ùå –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
				return;
			}

			console.log(`[TelegramBot] Order status update successful: ${orderId} -> ${status}`);

			// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
			await this.sheetsService.updateOrderStatus(orderId, status);

			const statusText = this.getStatusText(status);
			const message = `‚úÖ –ó–∞–∫–∞–∑ *${orderId}* –æ–±–Ω–æ–≤–ª–µ–Ω\n\nüìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: *${statusText}*`;

			const successKeyboard = {
				inline_keyboard: [
					[
						{ text: 'üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É', callback_data: 'back_menu' },
						{ text: 'üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞', callback_data: `details_${orderId}` }
					]
				]
			};

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: successKeyboard
			});
		} catch (error) {
			console.error('Failed to update order status:', error);
			this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderId}`);
		}
	}

	private async sendOrderDetails(chatId: number, orderId: string): Promise<void> {
		try {
			const order = await this.orderService.getOrderById(orderId);

			if (!order) {
				this.bot.sendMessage(chatId, `‚ùå –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
				return;
			}

			const message = this.formatOrderDetails(order);

			const inlineKeyboard = {
				inline_keyboard: [
					[
						{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `confirm_${orderId}` },
						{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏', callback_data: `ship_${orderId}` }
					],
					[
						{ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', callback_data: `deliver_${orderId}` },
						{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: `cancel_${orderId}` }
					]
				]
			};

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: inlineKeyboard
			});
		} catch (error) {
			console.error('Failed to send order details:', error);
			this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ ${orderId}`);
		}
	}

	private formatOrderSummary(order: Order): string {
		const statusEmoji = this.getStatusEmoji(order.status);
		const date = new Date(order.createdAt).toLocaleDateString('uk-UA');
		const total = (order.total / 100).toFixed(2);

		return (
			`${statusEmoji} *${order.id}* - ${date}\n` +
			`üí∞ ${total} ‚Ç¥ - ${order.items?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤\n\n`
		);
	}

	private formatOrderDetailedSummary(order: Order): string {
		const statusEmoji = this.getStatusEmoji(order.status);
		const statusText = this.getStatusText(order.status);
		const date = new Date(order.createdAt).toLocaleDateString('uk-UA');
		const total = (order.total / 100).toFixed(2);

		console.log(
			`[TelegramBot] Formatting order ${order.id}: status=${order.status}, statusText=${statusText}, statusEmoji=${statusEmoji}`
		);

		let summary = `${statusEmoji} *–ó–ê–ö–ê–ó ${order.id}*\n`;
		summary += `üìÖ –î–∞—Ç–∞: ${date}\n`;
		summary += `üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n`;
		summary += `üí∞ –°—É–º–º–∞: ${total} ‚Ç¥\n`;
		summary += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${order.items?.length || 0}\n`;

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
		if (order.items && order.items.length > 0) {
			summary += `üõçÔ∏è –¢–æ–≤–∞—Ä—ã:\n`;
			order.items.forEach((item, index) => {
				const price = (item.price / 100).toFixed(2);
				summary += `   ${index + 1}. ${item.productName} (${item.quantity}—à—Ç √ó ${price}‚Ç¥)\n`;
			});
		}

		// –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
		if (order.deliveryAddress) {
			summary += `üè† –ê–¥—Ä–µ—Å: `;
			if (order.deliveryAddress.city) {
				summary += `${order.deliveryAddress.city}`;
			}
			if (order.deliveryAddress.street) {
				summary += `, ${order.deliveryAddress.street}`;
			}
			if (order.deliveryAddress.npWarehouse) {
				summary += ` (–ù–ü ‚Ññ${order.deliveryAddress.npWarehouse})`;
			}
			summary += `\n`;
		}

		if (order.notes) {
			summary += `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${order.notes}\n`;
		}

		summary += `\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;

		return summary;
	}

	private formatOrderDetails(order: Order): string {
		const statusEmoji = this.getStatusEmoji(order.status);
		const createDate = new Date(order.createdAt).toLocaleDateString('uk-UA');
		const total = (order.total / 100).toFixed(2);

		let message = `${statusEmoji} *–ó–ê–ö–ê–ó ${order.id}*\n\n`;
		message += `üìÖ –°–æ–∑–¥–∞–Ω: ${createDate}\n`;
		message += `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusText(order.status)}\n`;
		message += `üí∞ –°—É–º–º–∞: ${total} ‚Ç¥\n\n`;

		message += `üì¶ *–¢–æ–≤–∞—Ä—ã:*\n`;
		order.items?.forEach((item, index) => {
			const price = (item.price / 100).toFixed(2);
			const itemTotal = (item.total / 100).toFixed(2);
			message += `${index + 1}. ${item.productName}\n`;
			message += `   ${item.quantity} —à—Ç. √ó ${price} ‚Ç¥ = ${itemTotal} ‚Ç¥\n`;
		});

		if (order.deliveryAddress) {
			message += `\nüè† *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n`;
			if (order.deliveryAddress.street) {
				message += `${order.deliveryAddress.street}\n`;
			}
			if (order.deliveryAddress.city) {
				message += `${order.deliveryAddress.city}\n`;
			}
			if (order.deliveryAddress.npWarehouse) {
				message += `–ù–æ–≤–∞ –ü–æ—à—Ç–∞ ‚Ññ${order.deliveryAddress.npWarehouse}\n`;
			}
		}

		if (order.notes) {
			message += `\nüìù *–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:* ${order.notes}\n`;
		}

		return message;
	}

	private getStatusEmoji(status: OrderStatus): string {
		switch (status) {
			case 'pending':
				return '‚è≥';
			case 'confirmed':
				return '‚úÖ';
			case 'shipped':
				return 'üì¶';
			case 'delivered':
				return 'üöö';
			case 'cancelled':
				return '‚ùå';
			default:
				return '‚ùì';
		}
	}

	private getStatusText(status: OrderStatus): string {
		switch (status) {
			case 'pending':
				return '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è';
			case 'confirmed':
				return '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ';
			case 'shipped':
				return '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ';
			case 'delivered':
				return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
			case 'cancelled':
				return '–°–∫–∞—Å–æ–≤–∞–Ω–æ';
			default:
				return status;
		}
	}

	// –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
	private getOrderActionButtons(orderId: string, currentStatus: OrderStatus): any[] {
		const buttons = [];

		switch (currentStatus) {
			case 'pending':
				buttons.push(
					{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `confirm_${orderId}` },
					{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: `cancel_${orderId}` }
				);
				break;
			case 'confirmed':
				buttons.push(
					{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏', callback_data: `ship_${orderId}` },
					{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: `cancel_${orderId}` }
				);
				break;
			case 'shipped':
				buttons.push({ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', callback_data: `deliver_${orderId}` });
				break;
			case 'delivered':
			case 'cancelled':
				// –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏
				buttons.push({ text: 'üìã –î–µ—Ç–∞–ª–∏', callback_data: `details_${orderId}` });
				break;
		}

		return buttons;
	}

	// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	private async sendMainMenu(chatId: number): Promise<void> {
		const welcomeMessage = `
ü§ñ *Balance Botanica Order Management Bot*

üöÄ *–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:*
		`;

		const mainMenu = {
			inline_keyboard: [
				[
					{ text: '‚è≥ –û—á—ñ–∫—É—é—Ç—å', callback_data: 'status_pending' },
					{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ', callback_data: 'status_confirmed' }
				],
				[
					{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ', callback_data: 'status_shipped' },
					{ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ', callback_data: 'status_delivered' }
				],
				[
					{ text: '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω—ñ', callback_data: 'status_cancelled' },
					{ text: 'üìã –í—Å—ñ –∑–∞–∫–∞–∑–∏', callback_data: 'all_orders' }
				]
			]
		};

		this.bot.sendMessage(chatId, welcomeMessage, {
			parse_mode: 'Markdown',
			reply_markup: mainMenu
		});
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
	async notifyNewOrder(order: Order): Promise<void> {
		console.log('[TelegramBot] notifyNewOrder called for order:', order.id);
		console.log('[TelegramBot] Current adminChatId:', this.adminChatId);

		if (!this.adminChatId) {
			console.log('[TelegramBot] ‚ùå Admin chat ID not set, skipping notification');
			console.log('[TelegramBot] üí° Make sure to send /start to the bot first');
			return;
		}

		console.log('[TelegramBot] ‚úÖ Admin chat ID found, sending notification...');

		const total = (order.total / 100).toFixed(2);
		const createDate = new Date(order.createdAt).toLocaleString('uk-UA');

		let message = `üÜï *–ù–û–í–´–ô –ó–ê–ö–ê–ó ${order.id}*\n\n`;
		message += `üìÖ –í—Ä–µ–º—è: ${createDate}\n`;
		message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customerName || order.userId}\n`;
		message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customerPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
		message += `üí∞ –°—É–º–º–∞: ${total} ‚Ç¥\n`;
		message += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${order.items?.length || 0}\n\n`;

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
		if (order.items && order.items.length > 0) {
			message += `üõí *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n`;
			order.items.forEach((item, index) => {
				const price = (item.price / 100).toFixed(2);
				message += `${index + 1}. ${item.productName}\n`;
				message += `   ${item.quantity} —à—Ç. √ó ${price} ‚Ç¥\n`;
			});
			message += '\n';
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
		if (order.deliveryAddress) {
			message += `üè† *–î–æ—Å—Ç–∞–≤–∫–∞:*\n`;
			if (typeof order.deliveryAddress === 'string') {
				// –ï—Å–ª–∏ –∞–¥—Ä–µ—Å - —Å—Ç—Ä–æ–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
				const shortAddress =
					order.deliveryAddress.length > 100
						? order.deliveryAddress.substring(0, 100) + '...'
						: order.deliveryAddress;
				message += `${shortAddress}\n`;
			} else {
				// –ï—Å–ª–∏ –∞–¥—Ä–µ—Å - –æ–±—ä–µ–∫—Ç
				if (order.deliveryAddress.npWarehouse) {
					message += `–ù–æ–≤–∞ –ü–æ—à—Ç–∞ ‚Ññ${order.deliveryAddress.npWarehouse}\n`;
				} else if (order.deliveryAddress.street) {
					message += `${order.deliveryAddress.street}, ${order.deliveryAddress.city}\n`;
				}
			}
			message += '\n';
		}

		message += `‚ö° *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!*`;

		const inlineKeyboard = {
			inline_keyboard: [
				[
					{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `confirm_${order.id}` },
					{ text: 'üìã –î–µ—Ç–∞–ª–∏', callback_data: `details_${order.id}` }
				],
				[{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: `cancel_${order.id}` }]
			]
		};

		try {
			const result = await this.bot.sendMessage(this.adminChatId, message, {
				parse_mode: 'Markdown',
				reply_markup: inlineKeyboard
			});
			console.log('[TelegramBot] ‚úÖ Notification sent successfully to chat:', this.adminChatId);
			console.log('[TelegramBot] üì® Message details:', {
				messageId: result.message_id,
				chatId: result.chat.id,
				orderId: order.id
			});
		} catch (error) {
			console.error('[TelegramBot] ‚ùå Failed to send new order notification:', error);
			console.error('[TelegramBot] üîç Error details:', {
				adminChatId: this.adminChatId,
				orderId: order.id,
				messageLength: message.length,
				error: error instanceof Error ? error.message : String(error)
			});
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞ (–Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É)
	setAdminChatId(chatId: string): void {
		this.adminChatId = chatId;
		console.log('Admin chat ID set:', chatId);
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
		this.saveAdminChatId(chatId);
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞
	getAdminChatId(): string | null {
		return this.adminChatId;
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
	getBotStatus(): object {
		return {
			adminChatId: this.adminChatId,
			botToken: this.bot ? '‚úÖ Set' : '‚ùå Not set',
			isPolling: false, // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ polling —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–Ω–∞—Ä—É–∂–∏
			fileExists: this.checkAdminChatIdFile()
		};
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å adminChatId
	private checkAdminChatIdFile(): boolean {
		try {
			const { readFileSync } = require('fs');
			const { join } = require('path');
			const filePath = join(process.cwd(), 'admin-chat-id.json');
			readFileSync(filePath);
			return true;
		} catch {
			return false;
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	async testNotification(): Promise<boolean> {
		console.log('[TelegramBot] üß™ Testing notification...');

		if (!this.adminChatId) {
			console.log('[TelegramBot] ‚ùå Cannot test: adminChatId not set');
			return false;
		}

		try {
			const testMessage = `üß™ *–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï*\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString('uk-UA')}\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.`;

			const result = await this.bot.sendMessage(this.adminChatId, testMessage, {
				parse_mode: 'Markdown'
			});

			console.log('[TelegramBot] ‚úÖ Test notification sent successfully!');
			console.log('[TelegramBot] üì® Test message ID:', result.message_id);
			return true;
		} catch (error) {
			console.error('[TelegramBot] ‚ùå Test notification failed:', error);
			return false;
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º adminChatId –≤ —Ñ–∞–π–ª
	private saveAdminChatId(chatId: string): void {
		try {
			const filePath = join(process.cwd(), 'admin-chat-id.json');
			writeFileSync(filePath, JSON.stringify({ adminChatId: chatId }, null, 2));
			console.log('[TelegramBot] Admin chat ID saved to file');
		} catch (error) {
			console.error('[TelegramBot] Failed to save admin chat ID:', error);
		}
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º adminChatId –∏–∑ —Ñ–∞–π–ª–∞
	private loadAdminChatId(): void {
		try {
			const filePath = join(process.cwd(), 'admin-chat-id.json');
			const data = readFileSync(filePath, 'utf8');
			const parsed = JSON.parse(data);
			if (parsed.adminChatId) {
				this.adminChatId = parsed.adminChatId;
				console.log('[TelegramBot] Admin chat ID loaded from file:', this.adminChatId);
			}
		} catch (error) {
			// –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
			console.log('[TelegramBot] No saved admin chat ID found (this is normal)');
		}
	}
}
