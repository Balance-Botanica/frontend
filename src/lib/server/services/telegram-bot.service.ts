// node-telegram-bot-api does not have bundled types, so we import as below to avoid lint errors
// If @types/node-telegram-bot-api is not available, add a custom .d.ts file as a fallback
// See: https://github.com/yagop/node-telegram-bot-api/issues/319
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import TelegramBot from 'node-telegram-bot-api';
import { OrderService } from '../application/services/order.service';
import { GoogleSheetsService } from './google-sheets.service';
import { PromoCodeService } from '../application/services/promo-code.service';
import type { Order, OrderStatus } from '../domain/interfaces/order.interface';
import { readFileSync, writeFileSync } from 'fs';
import { join } from 'path';

// === CURRENT ARCHITECTURE ANALYSIS ===
// ‚úÖ What works well:
// - Single entry point for bot management
// - All functionality in one place
// - Easy to understand and modify
// - Good error handling and logging
//
// ‚ùå Current problems:
// - Monolithic class (1600+ lines)
// - Mixed responsibilities (commands + callbacks + formatting)
// - Hard to test individual components
// - Difficult to maintain and extend
// - No separation of concerns
//
// === RECOMMENDED ARCHITECTURE IMPROVEMENTS ===
// 1. Split into smaller, focused modules
// 2. Use dependency injection
// 3. Add proper interfaces and abstractions
// 4. Implement strategy pattern for handlers
// 5. Add unit tests for each component
//
// === EXAMPLE: IMPROVED MODULAR ARCHITECTURE ===

// Example interfaces for better architecture:
interface IBotHandler {
	handle(chatId: number, data: any): Promise<void>;
	canHandle(data: any): boolean;
}

interface IOrderFormatter {
	formatOrderSummary(order: Order): string;
	formatOrderDetails(order: Order): string;
	formatOrderList(orders: Order[]): string;
}

interface IUserStateManager {
	getState(chatId: number): UserState | undefined;
	setState(chatId: number, state: UserState): void;
	clearState(chatId: number): void;
}

interface IMenuBuilder {
	createMainMenu(): any;
	createOrderActions(orderId: string, status: OrderStatus): any;
	createPromoMenu(): any;
}

// Example of how handlers could be structured:
class CommandHandler implements IBotHandler {
	constructor(
		private bot: TelegramBot,
		private orderService: OrderService
	) {}

	async handle(chatId: number, command: string): Promise<void> {
		switch (command) {
			case '/orders':
				await this.handleOrdersCommand(chatId);
				break;
			case '/start':
				await this.handleStartCommand(chatId);
				break;
			default:
				await this.bot.sendMessage(chatId, 'Unknown command');
		}
	}

	canHandle(data: any): boolean {
		return typeof data === 'string' && data.startsWith('/');
	}

	private async handleOrdersCommand(chatId: number): Promise<void> {
		const orders = await this.orderService.getAllOrders();
		const message = this.formatOrdersList(orders);
		await this.bot.sendMessage(chatId, message);
	}

	private async handleStartCommand(chatId: number): Promise<void> {
		const welcomeMessage = 'Welcome to Balance Botanica Bot!';
		const keyboard = this.createMainKeyboard();
		await this.bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard });
	}

	private formatOrdersList(orders: Order[]): string {
		return orders.map((order) => `${order.id}: ${order.status}`).join('\n');
	}

	private createMainKeyboard() {
		return {
			inline_keyboard: [
				[{ text: 'Orders', callback_data: 'show_orders' }],
				[{ text: 'Help', callback_data: 'show_help' }]
			]
		};
	}
}

// Example improved TelegramBotService:
class ImprovedTelegramBotService {
	private handlers: IBotHandler[] = [];

	constructor(
		private bot: TelegramBot,
		private orderService: OrderService,
		private stateManager: IUserStateManager,
		private formatter: IOrderFormatter,
		private menuBuilder: IMenuBuilder
	) {
		this.initializeHandlers();
		this.setupEventListeners();
	}

	private initializeHandlers(): void {
		this.handlers.push(new CommandHandler(this.bot, this.orderService));
		// Add other handlers...
	}

	private setupEventListeners(): void {
		this.bot.on('message', (msg) => this.handleMessage(msg));
		this.bot.on('callback_query', (query) => this.handleCallback(query));
	}

	private async handleMessage(msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id;
		const text = msg.text;

		if (!text) return;

		// Find appropriate handler
		const handler = this.handlers.find((h) => h.canHandle(text));
		if (handler) {
			await handler.handle(chatId, text);
		}
	}

	private async handleCallback(query: TelegramBot.CallbackQuery): Promise<void> {
		// Handle callback with appropriate handler
		const handler = this.handlers.find((h) => h.canHandle(query.data));
		if (handler) {
			await handler.handle(query.message?.chat.id!, query.data);
		}
		this.bot.answerCallbackQuery(query.id);
	}
}

interface UserState {
	awaitingOrderId: boolean;
	awaitingTTN?: boolean;
	awaitingPromoData?: boolean;
	action?: 'confirm' | 'cancel' | 'ship' | 'deliver' | 'create_promo';
	orderId?: string;
}

/**
 * LEGACY IMPLEMENTATION - MONOLITHIC BOT SERVICE
 *
 * This class works but has architectural issues:
 * - Too many responsibilities in one class
 * - Hard to test and maintain
 * - Mixed concerns (presentation + business logic)
 *
 * For production, consider refactoring to the modular architecture shown above.
 */
export class TelegramBotService {
	private bot: TelegramBot;
	private orderService: OrderService;
	private sheetsService: GoogleSheetsService;
	private promoCodeService: PromoCodeService;
	private adminChatId: string | null = null;
	private userStates: Map<number, UserState> = new Map();

	constructor(autoStartPolling = false) {
		const botToken =
			process.env.TELEGRAM_BOT_TOKEN || '8343800455:AAGk9NjKvopbJoGsRfl-Tkv3Rg9kh4qqDfI';

		if (!botToken) {
			throw new Error('TELEGRAM_BOT_TOKEN is required. Please set it in .env file');
		}

		this.bot = new TelegramBot(botToken, { polling: false }); // –í–∏–º–∏–∫–∞—î–º–æ –∞–≤—Ç–æ-polling
		this.orderService = new OrderService();
		this.sheetsService = new GoogleSheetsService();
		this.promoCodeService = new PromoCodeService();

		// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π adminChatId
		this.loadAdminChatId();

		this.setupCommands();
		this.setupCallbacks();
		this.setupTextHandler();

		// –ó–∞–ø—É—Å–∫–∞—î–º–æ polling —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —è–≤–Ω–æ –≤–∫–∞–∑–∞–Ω–æ
		if (autoStartPolling) {
			this.startPolling();
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É polling –≤—Ä—É—á–Ω—É
	startPolling(): void {
		console.log('[TelegramBot] Starting polling manually...');
		this.bot.startPolling();
	}

	private setupCommands(): void {
		// –ö–æ–º–∞–Ω–¥–∞ /start
		this.bot.onText(/\/start/, (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
			if (username !== 'qq5756853') {
				this.bot.sendMessage(
					chatId,
					'‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶–µ–π –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
				);
				console.log(`[TelegramBot] Access denied for user: @${username} (ID: ${msg.from?.id})`);
				return;
			}

			// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ adminChatId –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
			if (!this.adminChatId) {
				this.setAdminChatId(chatId.toString());
				console.log(`[TelegramBot] Admin chat ID set: ${chatId} for user @${username}`);
			}

			const welcomeMessage = `
ü§ñ *Balance Botanica Order Management Bot*

–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∫–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ –∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É.

üöÄ *–û–±–µ—Ä–∏ –¥—ñ—é:*
			`;

			const mainMenu = {
				inline_keyboard: [
					[
						{ text: '‚è≥ –û—á—ñ–∫—É—é—Ç—å', callback_data: 'status_pending' },
						{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ', callback_data: 'status_confirmed' }
					],
					[{ text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥–∏', callback_data: 'promo_menu' }],
					[
						{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ', callback_data: 'status_shipped' },
						{ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ', callback_data: 'status_delivered' }
					],
					[
						{ text: '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω—ñ', callback_data: 'status_cancelled' },
						{ text: 'üìã –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'all_orders' }
					]
				]
			};

			this.bot.sendMessage(chatId, welcomeMessage, {
				parse_mode: 'Markdown',
				reply_markup: mainMenu
			});
		});

		// –ö–æ–º–∞–Ω–¥–∞ /help
		this.bot.onText(/\/help/, (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø
			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');
				return;
			}

			const helpMessage = `
üìñ *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö:*

üîπ /orders - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
üîπ /pending - –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
üîπ /confirmed - –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
üîπ /shipped - –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
üîπ /delivered - –î–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
üîπ /cancelled - –°–∫–∞—Å–æ–≤–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
üîπ /menu - –û–Ω–æ–≤–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (—è–∫—â–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è)

üîπ /status [ID] [—Å—Ç–∞—Ç—É—Å] - –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   *–ü—Ä–∏–∫–ª–∞–¥–∏:*
   \`/status 123456 confirmed\`
   \`/status 123456 shipped\`
   \`/status 123456 delivered\`

üìä *–°—Ç–∞—Ç—É—Å–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å:*
‚Ä¢ pending - –û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
‚Ä¢ confirmed - –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ
‚Ä¢ shipped - –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
‚Ä¢ delivered - –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
‚Ä¢ cancelled - –°–∫–∞—Å–æ–≤–∞–Ω–æ

üé´ *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:*
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üé´ –ü—Ä–æ–º–æ–∫–æ–¥–∏" –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é
‚Ä¢ –°—Ç–≤–æ—Ä—é–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤: –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–∞ –∑–Ω–∏–∂–∫–∞, —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Å—É–º–∞, –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
‚Ä¢ –í–∏–¥–∞–ª—è–π—Ç–µ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º

üí° *–ü–æ—Ä–∞–¥–∏:*
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
‚Ä¢ –í—Å—ñ –∑–º—ñ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—é—Ç—å—Å—è –∑ Google Sheets
‚Ä¢ –ù–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
‚Ä¢ –Ø–∫—â–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu
			`;

			this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
		});

		// –ö–æ–º–∞–Ω–¥–∞ /orders - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
		this.bot.onText(/\/orders/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø
			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');
				return;
			}

			await this.sendOrdersList(chatId);
		});

		// –ö–æ–º–∞–Ω–¥–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
		this.bot.onText(/\/pending/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');
				return;
			}

			await this.sendOrdersByStatus(chatId, 'pending');
		});

		this.bot.onText(/\/confirmed/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');
				return;
			}

			await this.sendOrdersByStatus(chatId, 'confirmed');
		});

		this.bot.onText(/\/shipped/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');
				return;
			}

			await this.sendOrdersByStatus(chatId, 'shipped');
		});

		this.bot.onText(/\/delivered/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');
				return;
			}

			await this.sendOrdersByStatus(chatId, 'delivered');
		});

		this.bot.onText(/\/cancelled/, async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');
				return;
			}

			await this.sendOrdersByStatus(chatId, 'cancelled');
		});

		// –ö–æ–º–∞–Ω–¥–∞ /status –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
		this.bot.onText(
			/\/status (.+)/,
			async (msg: TelegramBot.Message, match: RegExpExecArray | null) => {
				const chatId = msg.chat.id;
				const username = msg.from?.username;

				if (username !== 'qq5756853') {
					this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');
					return;
				}

				const params = match?.[1]?.split(' ');

				if (!params || params.length !== 2) {
					this.bot.sendMessage(
						chatId,
						'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: /status [ID] [—Å—Ç–∞—Ç—É—Å]'
					);
					return;
				}

				const [orderId, newStatus] = params;
				await this.updateOrderStatus(chatId, orderId, newStatus as OrderStatus);
			}
		);

		// –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
		this.bot.onText(/\/cancel/, (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');
				return;
			}

			this.userStates.delete(chatId);
			this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.');
		});

		// –ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
		this.bot.onText(/\/menu/, (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const username = msg.from?.username;

			if (username !== 'qq5756853') {
				this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');
				return;
			}

			this.sendMainMenu(chatId);
		});
	}

	private setupCallbacks(): void {
		// –û–±—Ä–æ–±–∫–∞ inline –∫–Ω–æ–ø–æ–∫
		this.bot.on('callback_query', async (query: TelegramBot.CallbackQuery) => {
			const chatId = query.message?.chat.id;
			const data = query.data;
			const username = query.from?.username;

			console.log('[TelegramBot] üì® Callback received:', { data, chatId, username });

			if (!chatId || !data) return;

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø
			if (username !== 'qq5756853') {
				this.bot.answerCallbackQuery(query.id, { text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' });
				return;
			}

			// –†–æ–∑–±—ñ—Ä callback data
			const parts = data.split('_');
			const action = parts[0];
			const param1 = parts[1];
			const param2 = parts[2];

			try {
				console.log(
					`[TelegramBot] Processing callback: action='${action}', param1='${param1}', param2='${param2}'`
				);

				// –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–≤–Ω—É —Å—Ç—Ä–æ–∫—É data –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
				switch (data) {
					case 'promo_menu':
						console.log('[TelegramBot] üé´ Promo menu button clicked');
						await this.sendPromoMenu(chatId);
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'back_menu':
						await this.sendMainMenu(chatId);
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'all_orders':
						await this.sendOrdersList(chatId);
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'refresh_orders':
						await this.sendOrdersList(chatId);
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'create_promo':
						this.userStates.set(chatId, {
							awaitingOrderId: false,
							awaitingTTN: false,
							awaitingPromoData: true,
							action: 'create_promo'
						});
						this.bot.sendMessage(
							chatId,
							'üé´ –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n–ö–æ–¥,–¢–∏–ø,–ó–Ω–∞—á–µ–Ω–Ω—è[,–ú—ñ–Ω.—Å—É–º–∞][,–õ—ñ–º—ñ—Ç][,–î–µ–¥–ª–∞–π–Ω]\n\n–ü—Ä–∏–∫–ª–∞–¥–∏:\nWELCOME10,percentage,10\nSAVE50,fixed,50,500\nFREESHIP,free_shipping,0\n\n–¢–∏–ø–∏: percentage, fixed, free_shipping'
						);
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'list_promos':
						await this.sendPromoList(chatId);
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'promo_stats':
						await this.sendPromoStats(chatId);
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'delete_promo':
						await this.sendDeletePromoList(chatId);
						this.bot.answerCallbackQuery(query.id);
						return;
				}

				// –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞ —á–∞—Å—Ç–∏–Ω–∞–º–∏
				switch (action) {
					// –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó (–ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –ø–µ—Ä—à–∏–º!)
					case 'cancel':
						if (param1 === 'operation') {
							console.log('[TelegramBot] ‚ùå Cancel operation button clicked');
							this.userStates.delete(chatId);
							this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.');
							await this.sendOrdersList(chatId);
							this.bot.answerCallbackQuery(query.id);
							return;
						}
						// –Ø–∫—â–æ —Ü–µ –Ω–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–æ –∑–≤–∏—á–∞–π–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ cancel
						break;

					// –ú–µ–Ω—é —Å—Ç–∞—Ç—É—Å—ñ–≤
					case 'status':
						await this.sendOrdersByStatus(chatId, param1 as OrderStatus);
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'confirm':
						if (param1 === 'delete') {
							await this.confirmDeletePromo(chatId, param2);
							this.bot.answerCallbackQuery(query.id);
							return;
						}
						break;
					case 'delete':
						if (param1 === 'confirmed') {
							await this.deletePromoCode(chatId, param2);
							this.bot.answerCallbackQuery(query.id);
							return;
						}
						break;
					case 'all':
						if (param1 === 'orders') {
							await this.sendOrdersList(chatId);
							this.bot.answerCallbackQuery(query.id);
							return;
						}
						break;

					// –î—ñ—ó –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
					case 'confirm':
						// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É)
						if (param1 && param1 !== 'delete' && !param1.startsWith('delete')) {
							await this.updateOrderStatus(chatId, param1, 'confirmed');
							this.bot.answerCallbackQuery(query.id);
							return;
						}
						// –Ø–∫—â–æ —Ü–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É
						if (param1 === 'delete') {
							await this.confirmDeletePromo(chatId, param2);
							this.bot.answerCallbackQuery(query.id);
							return;
						}
						break;
					case 'ship':
						// –î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É—î–º–æ –¢–¢–ù
						this.userStates.set(chatId, {
							awaitingOrderId: false,
							awaitingTTN: true,
							action: 'ship',
							orderId: param1
						});

						const cancelKeyboard = {
							inline_keyboard: [[{ text: '‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è', callback_data: 'cancel_operation' }]]
						};
						this.bot.sendMessage(
							chatId,
							`üì¶ –í–≤–µ–¥—ñ—Ç—å –¢–¢–ù –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –ù–æ–≤–æ—ó –ü–æ—à—Ç.–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${param1}:`,
							{
								reply_markup: cancelKeyboard
							}
						);
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'deliver':
						await this.updateOrderStatus(chatId, param1, 'delivered');
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'cancel':
						await this.updateOrderStatus(chatId, param1, 'cancelled');
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'details':
						await this.sendOrderDetails(chatId, param1);
						this.bot.answerCallbackQuery(query.id);
						return;

					// –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
					case 'back':
					case 'menu':
						await this.sendMainMenu(chatId);
						this.bot.answerCallbackQuery(query.id);
						return;
					case 'refresh':
						if (param1 === 'orders') {
							await this.sendOrdersList(chatId);
							this.bot.answerCallbackQuery(query.id);
							return;
						}
						break;

					// –ù–æ–≤—ñ –¥—ñ—ó –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
					case 'action':
						await this.handleOrderAction(chatId, param1);
						this.bot.answerCallbackQuery(query.id);
						return;

					// –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ
				}

				// –ü—Ä–∏–±—Ä–∞—Ç–∏ loading —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏
				this.bot.answerCallbackQuery(query.id);
			} catch (error) {
				console.error('Callback query error:', error);
				this.bot.answerCallbackQuery(query.id, { text: '‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó' });
			}
		});
	}

	private setupTextHandler(): void {
		// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –¢–¢–ù
		this.bot.on('message', async (msg: TelegramBot.Message) => {
			const chatId = msg.chat.id;
			const text = msg.text;
			const username = msg.from?.username;

			if (!text) return;

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø
			if (username !== 'qq5756853') {
				return; // –¢–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
			}

			if (!this.adminChatId || chatId.toString() !== this.adminChatId) {
				return;
			}

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
			const userState = this.userStates.get(chatId);
			if (!userState) return;

			// –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —á–µ–∫–∞—î –¢–¢–ù
			if (userState.awaitingTTN && userState.orderId) {
				await this.processTTN(chatId, text.trim(), userState.orderId);
				return;
			}

			// –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —á–µ–∫–∞—î ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
			if (userState.awaitingOrderId && userState.action && userState.action !== 'create_promo') {
				await this.processOrderId(
					chatId,
					text.trim(),
					userState.action as 'confirm' | 'cancel' | 'ship' | 'deliver'
				);
				return;
			}

			// –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —á–µ–∫–∞—î –¥–∞–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥—É
			if (userState.awaitingPromoData && userState.action === 'create_promo') {
				await this.processPromoData(chatId, text.trim());
				return;
			}
		});
	}

	private async handleOrderAction(chatId: number, action: string): Promise<void> {
		const actionMap = {
			confirm: '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
			cancel: '—Å–∫–∞—Å—É–≤–∞—Ç–∏',
			ship: '–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏',
			deliver: '–ø–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π'
		};

		const actionText = actionMap[action as keyof typeof actionMap] || action;

		this.userStates.set(chatId, {
			awaitingOrderId: true,
			action: action as 'confirm' | 'cancel' | 'ship' | 'deliver'
		});

		const cancelKeyboard = {
			inline_keyboard: [[{ text: '‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è', callback_data: 'cancel_operation' }]]
		};
		this.bot.sendMessage(chatId, `üìù –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è ${actionText}:`, {
			reply_markup: cancelKeyboard
		});
	}

	private async processOrderId(
		chatId: number,
		orderId: string,
		action: 'confirm' | 'cancel' | 'ship' | 'deliver'
	): Promise<void> {
		try {
			// –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¢–¢–ù
			if (action === 'ship') {
				this.userStates.set(chatId, {
					awaitingOrderId: false,
					awaitingTTN: true,
					action: 'ship',
					orderId: orderId
				});

				const cancelKeyboard = {
					inline_keyboard: [[{ text: '‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è', callback_data: 'cancel_operation' }]]
				};
				this.bot.sendMessage(
					chatId,
					`üì¶ –í–≤–µ–¥—ñ—Ç—å –¢–¢–ù –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –ù–æ–≤–æ—ó –ü–æ—à—Ç.–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}:`,
					{
						reply_markup: cancelKeyboard
					}
				);
				return;
			}

			// –î–ª—è —ñ–Ω—à–∏—Ö –¥—ñ–π –≤—ñ–¥—Ä–∞–∑—É –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
			this.userStates.delete(chatId);

			// –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
			const statusMap = {
				confirm: 'confirmed' as OrderStatus,
				cancel: 'cancelled' as OrderStatus,
				ship: 'shipped' as OrderStatus,
				deliver: 'delivered' as OrderStatus
			};

			const newStatus = statusMap[action];
			await this.updateOrderStatus(chatId, orderId, newStatus);
		} catch (error) {
			console.error('Failed to process order ID:', error);
			this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
			this.userStates.delete(chatId);
		}
	}

	private async processTTN(chatId: number, ttn: string, orderId: string): Promise<void> {
		try {
			// –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
			this.userStates.delete(chatId);

			// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¢–¢–ù (–ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º –∑ 14 —Ü–∏—Ñ—Ä)
			if (!/^\d{14}$/.test(ttn)) {
				this.bot.sendMessage(chatId, '‚ùå –¢–¢–ù –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 14 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
				return;
			}

			console.log(`[TelegramBot] Shipping order ${orderId} with TTN: ${ttn}`);

			// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ shipped
			await this.updateOrderStatus(chatId, orderId, 'shipped');

			// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¢–¢–ù –∑ Google Sheets
			try {
				await this.sheetsService.updateOrderTTN(orderId, ttn);
				console.log(`[TelegramBot] TTN ${ttn} synced to Google Sheets for order ${orderId}`);
			} catch (sheetsError) {
				console.error('[TelegramBot] Failed to sync TTN to Google Sheets:', sheetsError);
				// –ù–µ –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å, —è–∫—â–æ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
			}

			// –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ –¢–¢–ù
			this.bot.sendMessage(
				chatId,
				`‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId} —É—Å–ø—ñ—à–Ω–æ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ!\n\nüì¶ –¢–¢–ù: ${ttn}\n\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É—î –¥–æ—Å—Ç–∞–≤–∫–∏.`
			);
		} catch (error) {
			console.error('Failed to process TTN:', error);
			this.bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¢–¢–ù. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
		}
	}

	private async sendOrdersList(chatId: number): Promise<void> {
		try {
			this.bot.sendMessage(chatId, 'üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');

			// –î–ª—è –∞–¥–º—ñ–Ω–∞ –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
			const orders = await this.getAllOrdersForAdmin();

			if (orders.length === 0) {
				const emptyMessage = 'üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å';
				const emptyKeyboard = {
					inline_keyboard: [
						[
							{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'action_confirm' },
							{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'action_cancel' }
						],
						[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_menu' }]
					]
				};

				this.bot.sendMessage(chatId, emptyMessage, { reply_markup: emptyKeyboard });
				return;
			}

			let message = `üìã *–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (${orders.length}):*\n\n`;

			// –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
			for (const order of orders) {
				message += this.formatOrderDetailedSummary(order);
			}

			// –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
			const inlineKeyboard = {
				inline_keyboard: [
					[
						{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'action_confirm' },
						{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'action_cancel' }
					],
					[
						{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'action_ship' },
						{ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', callback_data: 'action_deliver' }
					],
					[
						{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_orders' },
						{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_menu' }
					]
				]
			};

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: inlineKeyboard
			});
		} catch (error) {
			console.error('Failed to send orders list:', error);
			this.bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å');
		}
	}

	// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	private async getAllOrdersForAdmin(): Promise<Order[]> {
		try {
			console.log('[TelegramBot] Getting all orders for admin...');
			// –ü—Ä—è–º–∏–π –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
			const orders = await this.orderService.getAllOrders();
			console.log(`[TelegramBot] Retrieved ${orders.length} orders from database`);
			orders.forEach((order, index) => {
				console.log(
					`[TelegramBot] Order ${index + 1}: ID=${order.id}, Status=${order.status}, User=${order.userId}`
				);
			});
			return orders;
		} catch (error) {
			console.error('[TelegramBot] Failed to get all orders for admin:', error);
			return [];
		}
	}

	private async sendOrdersByStatus(chatId: number, status: OrderStatus): Promise<void> {
		try {
			const orders = await this.getAllOrdersForAdmin();
			const filteredOrders = orders.filter((order) => order.status === status);

			if (filteredOrders.length === 0) {
				const emptyMessage = `üì≠ –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "${this.getStatusText(status)}"`;
				const emptyKeyboard = {
					inline_keyboard: [
						[
							{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'action_confirm' },
							{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'action_cancel' }
						],
						[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_menu' }]
					]
				};

				this.bot.sendMessage(chatId, emptyMessage, { reply_markup: emptyKeyboard });
				return;
			}

			let message = `üìã *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è "${this.getStatusText(status)}" (${filteredOrders.length}):*\n\n`;

			// –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
			for (const order of filteredOrders) {
				message += this.formatOrderDetailedSummary(order);
			}

			// –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
			const inlineKeyboard = {
				inline_keyboard: [
					[
						{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'action_confirm' },
						{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'action_cancel' }
					],
					[
						{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'action_ship' },
						{ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', callback_data: 'action_deliver' }
					],
					[
						{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_orders' },
						{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_menu' }
					]
				]
			};

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: inlineKeyboard
			});
		} catch (error) {
			console.error('Failed to send orders by status:', error);
			this.bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å');
		}
	}

	private async updateOrderStatus(
		chatId: number,
		orderId: string,
		status: OrderStatus
	): Promise<void> {
		try {
			console.log(`[TelegramBot] Starting order status update: ${orderId} -> ${status}`);

			// –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
			const currentOrder = await this.orderService.getOrderById(orderId);
			if (!currentOrder) {
				console.log(`[TelegramBot] Order ${orderId} not found`);
				this.bot.sendMessage(chatId, `‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
				return;
			}

			const currentStatus = currentOrder.status;
			console.log(`[TelegramBot] Current order status: ${currentStatus}`);

			// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤ (–∑–∞–±–æ—Ä–æ–Ω–∞ –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–Ω–∏—è)
			if (!this.isValidStatusTransition(currentStatus, status)) {
				const errorMessage = this.getStatusTransitionErrorMessage(currentStatus, status);
				console.log(`[TelegramBot] Invalid status transition: ${currentStatus} -> ${status}`);
				this.bot.sendMessage(chatId, errorMessage);
				return;
			}

			// –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —É –ë–î
			const success = await this.orderService.updateOrderStatus(orderId, status);
			console.log(`[TelegramBot] OrderService.updateOrderStatus result: ${success}`);

			if (!success) {
				console.log(`[TelegramBot] OrderService returned false for order ${orderId}`);
				this.bot.sendMessage(chatId, `‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
				return;
			}

			console.log(`[TelegramBot] Order status update successful: ${orderId} -> ${status}`);

			// –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —É Google Sheets
			await this.sheetsService.updateOrderStatus(orderId, status);

			const statusText = this.getStatusText(status);
			const message = `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è *${orderId}* –æ–Ω–æ–≤–ª–µ–Ω–æ\n\nüìä –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: *${statusText}*`;

			const successKeyboard = {
				inline_keyboard: [
					[
						{ text: 'üîÑ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É', callback_data: 'back_menu' },
						{ text: 'üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: `details_${orderId}` }
					]
				]
			};

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: successKeyboard
			});
		} catch (error) {
			console.error('Failed to update order status:', error);
			this.bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}`);
		}
	}

	private async sendOrderDetails(chatId: number, orderId: string): Promise<void> {
		try {
			const order = await this.orderService.getOrderById(orderId);

			if (!order) {
				this.bot.sendMessage(chatId, `‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
				return;
			}

			const message = this.formatOrderDetails(order);

			const inlineKeyboard = {
				inline_keyboard: [
					[
						{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `confirm_${orderId}` },
						{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏', callback_data: `ship_${orderId}` }
					],
					[
						{ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', callback_data: `deliver_${orderId}` },
						{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: `cancel_${orderId}` }
					]
				]
			};

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: inlineKeyboard
			});
		} catch (error) {
			console.error('Failed to send order details:', error);
			this.bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}`);
		}
	}

	private formatOrderSummary(order: Order): string {
		const statusEmoji = this.getStatusEmoji(order.status);
		const date = new Date(order.createdAt).toLocaleDateString('uk-UA');
		const total = (order.total / 100).toFixed(2);

		return (
			`${statusEmoji} *${order.id}* - ${date}\n` +
			`üí∞ ${total} ‚Ç¥ - ${order.items?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤\n\n`
		);
	}

	private formatOrderDetailedSummary(order: Order): string {
		const statusEmoji = this.getStatusEmoji(order.status);
		const statusText = this.getStatusText(order.status);
		const date = new Date(order.createdAt).toLocaleDateString('uk-UA');
		const total = (order.total / 100).toFixed(2);

		console.log(
			`[TelegramBot] Formatting order ${order.id}: status=${order.status}, statusText=${statusText}, statusEmoji=${statusEmoji}`
		);

		let summary = `${statusEmoji} *–ó–ê–ú–û–í–õ–ï–ù–ù–Ø ${order.id}*\n`;
		summary += `üìÖ –î–∞—Ç–∞: ${date}\n`;
		summary += `üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n`;
		summary += `üí∞ –°—É–º–∞: ${total} ‚Ç¥\n`;
		summary += `üì¶ –¢–æ–≤–∞—Ä—ñ–≤: ${order.items?.length || 0}\n`;

		// –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–≤–∞—Ä–∏
		if (order.items && order.items.length > 0) {
			summary += `üõçÔ∏è –¢–æ–≤–∞—Ä–∏:\n`;
			order.items.forEach((item, index) => {
				const price = (item.price / 100).toFixed(2);
				summary += `   ${index + 1}. ${item.productName} (${item.quantity}—à—Ç. √ó ${price}‚Ç¥)\n`;
			});
		}

		// –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
		if (order.deliveryAddress) {
			summary += `üè† –ê–¥—Ä–µ—Å–∞: `;

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥—Ä–µ—Å–∞ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
			if (
				order.deliveryAddress.npWarehouse ||
				order.deliveryAddress.npCityName ||
				order.deliveryAddress.useNovaPost
			) {
				// –ê–¥—Ä–µ—Å–∞ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
				if (order.deliveryAddress.npCityName) {
					summary += `${order.deliveryAddress.npCityName}`;
				}
				if (order.deliveryAddress.npWarehouse) {
					summary += `, –ù–ü ‚Ññ${order.deliveryAddress.npWarehouse}`;
				}
			} else {
				// –ó–≤–∏—á–∞–π–Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
				if (order.deliveryAddress.city) {
					summary += `${order.deliveryAddress.city}`;
				}
				if (order.deliveryAddress.street) {
					summary += `, ${order.deliveryAddress.street}`;
				}
			}
			summary += `\n`;
		}

		if (order.notes) {
			summary += `üìù –ü—Ä–∏–º—ñ—Ç–∫–∏: ${order.notes}\n`;
		}

		summary += `\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;

		return summary;
	}

	private formatOrderDetails(order: Order): string {
		const statusEmoji = this.getStatusEmoji(order.status);
		const createDate = new Date(order.createdAt).toLocaleDateString('uk-UA');
		const total = (order.total / 100).toFixed(2);

		let message = `${statusEmoji} *–ó–ê–ú–û–í–õ–ï–ù–ù–Ø ${order.id}*\n\n`;
		message += `üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${createDate}\n`;
		message += `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusText(order.status)}\n`;
		message += `üí∞ –°—É–º–º–∞: ${total} ‚Ç¥\n\n`;

		message += `üì¶ *–¢–æ–≤–∞—Ä–∏:*\n`;
		order.items?.forEach((item, index) => {
			const price = (item.price / 100).toFixed(2);
			const itemTotal = (item.total / 100).toFixed(2);
			message += `${index + 1}. ${item.productName}\n`;
			message += `   ${item.quantity} —à—Ç.. √ó ${price} ‚Ç¥ = ${itemTotal} ‚Ç¥\n`;
		});

		if (order.deliveryAddress) {
			message += `\nüè† *–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:*\n`;

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥—Ä–µ—Å–∞ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
			if (
				order.deliveryAddress.npWarehouse ||
				order.deliveryAddress.npCityName ||
				order.deliveryAddress.useNovaPost
			) {
				// –ê–¥—Ä–µ—Å–∞ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
				if (order.deliveryAddress.npCityFullName) {
					message += `${order.deliveryAddress.npCityFullName}\n`;
				}
				if (order.deliveryAddress.npWarehouse) {
					message += `–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ ‚Ññ${order.deliveryAddress.npWarehouse}\n`;
				}
				if (order.deliveryAddress.name && order.deliveryAddress.name !== '–ù–æ–≤–∞ –ü–æ—à—Ç–∞') {
					message += `–û—Ç—Ä–∏–º—É–≤–∞—á: ${order.deliveryAddress.name}\n`;
				}
			} else {
				// –ó–≤–∏—á–∞–π–Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
				if (order.deliveryAddress.street) {
					message += `${order.deliveryAddress.street}\n`;
				}
				if (order.deliveryAddress.city) {
					message += `${order.deliveryAddress.city}\n`;
				}
				if (order.deliveryAddress.postalCode) {
					message += `${order.deliveryAddress.postalCode}\n`;
				}
				if (order.deliveryAddress.name) {
					message += `–û—Ç—Ä–∏–º—É–≤–∞—á: ${order.deliveryAddress.name}\n`;
				}
			}
		}

		if (order.notes) {
			message += `\nüìù *–ü—Ä–∏–º—ñ—Ç–∫–∏:* ${order.notes}\n`;
		}

		return message;
	}

	private getStatusEmoji(status: OrderStatus): string {
		switch (status) {
			case 'pending':
				return '‚è≥';
			case 'confirmed':
				return '‚úÖ';
			case 'shipped':
				return 'üì¶';
			case 'delivered':
				return 'üöö';
			case 'cancelled':
				return '‚ùå';
			default:
				return '‚ùì';
		}
	}

	private getStatusText(status: OrderStatus): string {
		switch (status) {
			case 'pending':
				return '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è';
			case 'confirmed':
				return '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ';
			case 'shipped':
				return '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ';
			case 'delivered':
				return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
			case 'cancelled':
				return '–°–∫–∞—Å–æ–≤–∞–Ω–æ';
			default:
				return status;
		}
	}

	// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥—ñ–π –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É
	private getOrderActionButtons(orderId: string, currentStatus: OrderStatus): any[] {
		const buttons = [];

		switch (currentStatus) {
			case 'pending':
				buttons.push(
					{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `confirm_${orderId}` },
					{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: `cancel_${orderId}` }
				);
				break;
			case 'confirmed':
				buttons.push(
					{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏', callback_data: `ship_${orderId}` },
					{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: `cancel_${orderId}` }
				);
				break;
			case 'shipped':
				buttons.push({ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', callback_data: `deliver_${orderId}` });
				break;
			case 'delivered':
			case 'cancelled':
				// –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–µ—Ç–∞–ª—ñ
				buttons.push({ text: 'üìã –î–µ—Ç–∞–ª—ñ', callback_data: `details_${orderId}` });
				break;
		}

		return buttons;
	}

	// –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
	private async sendMainMenu(chatId: number): Promise<void> {
		const welcomeMessage = `
ü§ñ *Balance Botanica Order Management Bot*

üöÄ *–û–±–µ—Ä–∏ –¥—ñ—é:*
		`;

		const mainMenu = {
			inline_keyboard: [
				[
					{ text: '‚è≥ –û—á—ñ–∫—É—é—Ç—å', callback_data: 'status_pending' },
					{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ', callback_data: 'status_confirmed' }
				],
				[{ text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥–∏', callback_data: 'promo_menu' }],
				[
					{ text: 'üì¶ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ', callback_data: 'status_shipped' },
					{ text: 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ', callback_data: 'status_delivered' }
				],
				[
					{ text: '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω—ñ', callback_data: 'status_cancelled' },
					{ text: 'üìã –í—Å—ñ –∑–∞–∫–∞–∑–∏', callback_data: 'all_orders' }
				]
			]
		};

		this.bot.sendMessage(chatId, welcomeMessage, {
			parse_mode: 'Markdown',
			reply_markup: mainMenu
		});
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
	async notifyNewOrder(order: Order): Promise<void> {
		console.log('[TelegramBot] notifyNewOrder called for order:', order.id);
		console.log('[TelegramBot] Current adminChatId:', this.adminChatId);

		if (!this.adminChatId) {
			console.log('[TelegramBot] ‚ùå Admin chat ID not set, skipping notification');
			console.log('[TelegramBot] üí° Make sure to send /start to the bot first');
			return;
		}

		console.log('[TelegramBot] ‚úÖ Admin chat ID found, sending notification...');

		const total = (order.total / 100).toFixed(2);
		const createDate = new Date(order.createdAt).toLocaleString('uk-UA');

		let message = `üÜï *–ù–û–í–´–ô –ó–ê–ö–ê–ó ${order.id}*\n\n`;
		message += `üìÖ –í—Ä–µ–º—è: ${createDate}\n`;
		message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customerName || order.userId}\n`;
		message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customerPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
		message += `üí∞ –°—É–º–º–∞: ${total} ‚Ç¥\n`;
		message += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${order.items?.length || 0}\n\n`;

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
		if (order.items && order.items.length > 0) {
			message += `üõí *–°–æ—Å—Ç–∞–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n`;
			order.items.forEach((item, index) => {
				const price = (item.price / 100).toFixed(2);
				message += `${index + 1}. ${item.productName}\n`;
				message += `   ${item.quantity} —à—Ç.. √ó ${price} ‚Ç¥\n`;
			});
			message += '\n';
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
		if (order.deliveryAddress) {
			message += `üè† *–î–æ—Å—Ç–∞–≤–∫–∞:*\n`;
			if (typeof order.deliveryAddress === 'string') {
				// –ï—Å–ª–∏ –∞–¥—Ä–µ—Å - —Å—Ç—Ä–æ–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
				const shortAddress =
					order.deliveryAddress.length > 100
						? order.deliveryAddress.substring(0, 100) + '...'
						: order.deliveryAddress;
				message += `${shortAddress}\n`;
			} else {
				// –ï—Å–ª–∏ –∞–¥—Ä–µ—Å - –æ–±—ä–µ–∫—Ç
				if (order.deliveryAddress.npWarehouse) {
					message += `–ù–æ–≤–∞ –ü–æ—à—Ç.–∞ ‚Ññ${order.deliveryAddress.npWarehouse}\n`;
				} else if (order.deliveryAddress.street) {
					message += `${order.deliveryAddress.street}, ${order.deliveryAddress.city}\n`;
				}
			}
			message += '\n';
		}

		message += `‚ö° *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!*`;

		const inlineKeyboard = {
			inline_keyboard: [
				[
					{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `confirm_${order.id}` },
					{ text: 'üìã –î–µ—Ç–∞–ª–∏', callback_data: `details_${order.id}` }
				],
				[{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: `cancel_${order.id}` }]
			]
		};

		try {
			const result = await this.bot.sendMessage(this.adminChatId, message, {
				parse_mode: 'Markdown',
				reply_markup: inlineKeyboard
			});
			console.log('[TelegramBot] ‚úÖ Notification sent successfully to chat:', this.adminChatId);
			console.log('[TelegramBot] üì® Message details:', {
				messageId: result.message_id,
				chatId: result.chat.id,
				orderId: order.id
			});
		} catch (error) {
			console.error('[TelegramBot] ‚ùå Failed to send new order notification:', error);
			console.error('[TelegramBot] üîç Error details:', {
				adminChatId: this.adminChatId,
				orderId: order.id,
				messageLength: message.length,
				error: error instanceof Error ? error.message : String(error)
			});
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞ (–Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É)
	setAdminChatId(chatId: string): void {
		this.adminChatId = chatId;
		console.log('Admin chat ID set:', chatId);
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
		this.saveAdminChatId(chatId);
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞
	getAdminChatId(): string | null {
		return this.adminChatId;
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
	getBotStatus(): object {
		return {
			adminChatId: this.adminChatId,
			botToken: this.bot ? '‚úÖ Set' : '‚ùå Not set',
			isPolling: false, // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ polling —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–Ω–∞—Ä—É–∂–∏
			fileExists: this.checkAdminChatIdFile()
		};
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å adminChatId
	private checkAdminChatIdFile(): boolean {
		try {
			const { readFileSync } = require('fs');
			const { join } = require('path');
			const filePath = join(process.cwd(), 'admin-chat-id.json');
			readFileSync(filePath);
			return true;
		} catch {
			return false;
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	async testNotification(): Promise<boolean> {
		console.log('[TelegramBot] üß™ Testing notification...');

		if (!this.adminChatId) {
			console.log('[TelegramBot] ‚ùå Cannot test: adminChatId not set');
			return false;
		}

		try {
			const testMessage = `üß™ *–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï*\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString('uk-UA')}\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.`;

			const result = await this.bot.sendMessage(this.adminChatId, testMessage, {
				parse_mode: 'Markdown'
			});

			console.log('[TelegramBot] ‚úÖ Test notification sent successfully!');
			console.log('[TelegramBot] üì® Test message ID:', result.message_id);
			return true;
		} catch (error) {
			console.error('[TelegramBot] ‚ùå Test notification failed:', error);
			return false;
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º adminChatId –≤ —Ñ–∞–π–ª
	private saveAdminChatId(chatId: string): void {
		try {
			const filePath = join(process.cwd(), 'admin-chat-id.json');
			writeFileSync(filePath, JSON.stringify({ adminChatId: chatId }, null, 2));
			console.log('[TelegramBot] Admin chat ID saved to file');
		} catch (error) {
			console.error('[TelegramBot] Failed to save admin chat ID:', error);
		}
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º adminChatId –∏–∑ —Ñ–∞–π–ª–∞
	private loadAdminChatId(): void {
		try {
			const filePath = join(process.cwd(), 'admin-chat-id.json');
			const data = readFileSync(filePath, 'utf8');
			const parsed = JSON.parse(data);
			if (parsed.adminChatId) {
				this.adminChatId = parsed.adminChatId;
				console.log('[TelegramBot] Admin chat ID loaded from file:', this.adminChatId);
			}
		} catch (error) {
			// –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
			console.log('[TelegramBot] No saved admin chat ID found (this is normal)');
		}
	}

	// === –ü–†–û–ú–û–ö–û–î–ò - –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===

	private async sendPromoMenu(chatId: number): Promise<void> {
		const promoMenu = {
			inline_keyboard: [
				[
					{ text: '‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'create_promo' },
					{ text: 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤', callback_data: 'list_promos' }
				],
				[
					{ text: 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'delete_promo' },
					{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'promo_stats' }
				],
				[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_menu' }]
			]
		};

		this.bot.sendMessage(chatId, 'üé´ *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', {
			parse_mode: 'Markdown',
			reply_markup: promoMenu
		});
	}

	private async sendPromoList(chatId: number): Promise<void> {
		try {
			const promoCodes = await this.promoCodeService.getAllPromoCodes();

			if (promoCodes.length === 0) {
				this.bot.sendMessage(chatId, 'üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤', {
					reply_markup: {
						inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'promo_menu' }]]
					}
				});
				return;
			}

			let message = 'üé´ *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤:*\n\n';

			for (const [index, promo] of promoCodes.entries()) {
				const status = promo.isActive ? '‚úÖ' : '‚ùå';
				const discount =
					promo.discountType === 'percentage'
						? `${promo.discountValue}%`
						: promo.discountType === 'fixed'
							? `‚Ç¥${promo.discountValue}`
							: '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞';

				message += `${index + 1}. *${promo.code}* ${status}\n`;
				message += `   –ó–Ω–∏–∂–∫–∞: ${discount}\n`;
				message += `   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${promo.usageCount || 0}`;
				if (promo.usageLimit) message += `/${promo.usageLimit}`;
				message += '\n';

				if (promo.expiresAt) {
					const expiry = new Date(promo.expiresAt).toLocaleDateString('uk-UA');
					message += `   –î—ñ—î –¥–æ: ${expiry}\n`;
				}

				message += '\n';
			}

			const keyboard = {
				inline_keyboard: [
					[{ text: '‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π', callback_data: 'create_promo' }],
					[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'promo_menu' }]
				]
			};

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: keyboard
			});
		} catch (error) {
			console.error('Error sending promo list:', error);
			this.bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤');
		}
	}

	private async sendPromoStats(chatId: number): Promise<void> {
		try {
			const promoCodes = await this.promoCodeService.getAllPromoCodes();

			let totalCodes = promoCodes.length;
			let activeCodes = promoCodes.filter((p) => p.isActive).length;
			let totalUsage = promoCodes.reduce((sum, p) => sum + (p.usageCount || 0), 0);
			let expiredCodes = promoCodes.filter(
				(p) => p.expiresAt && new Date(p.expiresAt) < new Date()
			).length;

			let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤*\n\n';
			message += `üìã –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${totalCodes}\n`;
			message += `‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: ${activeCodes}\n`;
			message += `‚ùå –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö: ${expiredCodes}\n`;
			message += `üéØ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å: ${totalUsage}\n\n`;

			if (promoCodes.length > 0) {
				message += '*–¢–æ–ø –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤:*\n';
				const topPromos = promoCodes
					.sort((a, b) => (b.usageCount || 0) - (a.usageCount || 0))
					.slice(0, 5);

				for (const promo of topPromos) {
					message += `‚Ä¢ ${promo.code}: ${promo.usageCount || 0} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å\n`;
				}
			}

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: {
					inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'promo_menu' }]]
				}
			});
		} catch (error) {
			console.error('Error sending promo stats:', error);
			this.bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
		}
	}

	private async processPromoData(chatId: number, text: string): Promise<void> {
		try {
			// Clear user state
			this.userStates.delete(chatId);

			// Parse promo data: Code,Type,Value[,MinAmount][,Limit][,Deadline]
			const parts = text.split(',').map((p) => p.trim());

			if (parts.length < 3) {
				this.bot.sendMessage(
					chatId,
					'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: –ö–æ–¥,–¢–∏–ø,–ó–Ω–∞—á–µ–Ω–Ω—è[,–ú—ñ–Ω.—Å—É–º–∞][,–õ—ñ–º—ñ—Ç][,–î–µ–¥–ª–∞–π–Ω]'
				);
				return;
			}

			const [code, type, valueStr, minAmountStr, limitStr, deadlineStr] = parts;

			// Validate type
			if (!['percentage', 'fixed', 'free_shipping'].includes(type)) {
				this.bot.sendMessage(
					chatId,
					'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø. –î–æ—Å—Ç—É–ø–Ω—ñ: percentage, fixed, free_shipping'
				);
				return;
			}

			// Validate value
			const value = parseFloat(valueStr);
			if (isNaN(value) || value < 0) {
				this.bot.sendMessage(chatId, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–Ω–∏–∂–∫–∏');
				return;
			}

			// Parse optional parameters
			const minAmount = minAmountStr ? parseFloat(minAmountStr) : 0;
			const limit = limitStr ? parseInt(limitStr) : undefined;
			const deadline = deadlineStr ? new Date(deadlineStr) : undefined;

			// Create promo code
			const promoData = {
				code: code.toUpperCase(),
				discountType: type as 'percentage' | 'fixed' | 'free_shipping',
				discountValue: value,
				minimumAmount: minAmount || undefined,
				usageLimit: limit || undefined,
				expiresAt: deadline || undefined,
				isActive: true
			};

			const promoCode = await this.promoCodeService.createPromoCode(promoData);

			let message = '‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!*\n\n';
			message += `üé´ –ö–æ–¥: *${promoCode.code}*\n`;
			message += `üí∞ –ó–Ω–∏–∂–∫–∞: ${type === 'percentage' ? `${value}%` : type === 'fixed' ? `‚Ç¥${value}` : '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞'}\n`;

			if (minAmount > 0) message += `üì¶ –ú—ñ–Ω. —Å—É–º–∞: ‚Ç¥${minAmount}\n`;
			if (limit) message += `üî¢ –õ—ñ–º—ñ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å: ${limit}\n`;
			if (deadline) message += `üìÖ –î—ñ—î –¥–æ: ${deadline.toLocaleDateString('uk-UA')}\n`;

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: {
					inline_keyboard: [
						[{ text: '‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –æ–¥–∏–Ω', callback_data: 'create_promo' }],
						[{ text: 'üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫', callback_data: 'list_promos' }],
						[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'promo_menu' }]
					]
				}
			});
		} catch (error) {
			console.error('Error processing promo data:', error);
			this.bot.sendMessage(
				chatId,
				'‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'
			);
		}
	}

	private async sendDeletePromoList(chatId: number): Promise<void> {
		try {
			const promoCodes = await this.promoCodeService.getAllPromoCodes();

			if (promoCodes.length === 0) {
				this.bot.sendMessage(chatId, 'üì≠ –ù–µ–º–∞—î –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è', {
					reply_markup: {
						inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'promo_menu' }]]
					}
				});
				return;
			}

			let message = 'üóëÔ∏è *–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤*\n\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n';

			const inlineKeyboard: any[][] = [];

			for (const promo of promoCodes) {
				const discount =
					promo.discountType === 'percentage'
						? `${promo.discountValue}%`
						: promo.discountType === 'fixed'
							? `‚Ç¥${promo.discountValue}`
							: '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞';

				message += `‚Ä¢ *${promo.code}* - ${discount}`;
				if (promo.usageCount && promo.usageCount > 0) {
					message += ` (${promo.usageCount} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å)`;
				}
				message += '\n';

				inlineKeyboard.push([
					{
						text: `üóëÔ∏è ${promo.code}`,
						callback_data: `confirm_delete_${promo.code}`
					}
				]);
			}

			inlineKeyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'promo_menu' }]);

			this.bot.sendMessage(chatId, message, {
				parse_mode: 'Markdown',
				reply_markup: { inline_keyboard: inlineKeyboard }
			});
		} catch (error) {
			console.error('Error sending delete promo list:', error);
			this.bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤');
		}
	}

	private async confirmDeletePromo(chatId: number, promoCode: string): Promise<void> {
		try {
			const promo = await this.promoCodeService.getPromoCodeByCode(promoCode);

			if (!promo) {
				this.bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ *${promoCode}* –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, {
					parse_mode: 'Markdown',
					reply_markup: {
						inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'delete_promo' }]]
					}
				});
				return;
			}

			const discount =
				promo.discountType === 'percentage'
					? `${promo.discountValue}%`
					: promo.discountType === 'fixed'
						? `‚Ç¥${promo.discountValue}`
						: '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞';

			let confirmMessage = `‚ö†Ô∏è *–í–ò –°–ò–ì–£–†–ù–Ü, –©–û –•–û–ß–ï–¢–ï –í–ò–î–ê–õ–ò–¢–ò –ü–†–û–ú–û–ö–û–î?*\n\n`;
			confirmMessage += `üé´ –ö–æ–¥: *${promo.code}*\n`;
			confirmMessage += `üí∞ –ó–Ω–∏–∂–∫–∞: ${discount}\n`;

			if (promo.usageCount && promo.usageCount > 0) {
				confirmMessage += `üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${promo.usageCount} —Ä–∞–∑—ñ–≤\n`;
			}

			if (promo.usageLimit) {
				confirmMessage += `üî¢ –õ—ñ–º—ñ—Ç: ${promo.usageLimit}\n`;
			}

			confirmMessage += `\n‚ùå –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏!`;

			const confirmKeyboard = {
				inline_keyboard: [
					[
						{ text: '‚úÖ –¢–ê–ö, –í–ò–î–ê–õ–ò–¢–ò', callback_data: `delete_confirmed_${promo.code}` },
						{ text: '‚ùå –ù–Ü, –°–ö–ê–°–£–í–ê–¢–ò', callback_data: 'delete_promo' }
					]
				]
			};

			this.bot.sendMessage(chatId, confirmMessage, {
				parse_mode: 'Markdown',
				reply_markup: confirmKeyboard
			});
		} catch (error) {
			console.error('Error confirming delete promo:', error);
			this.bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É');
		}
	}

	private async deletePromoCode(chatId: number, promoCode: string): Promise<void> {
		try {
			const success = await this.promoCodeService.deletePromoCodeByCode(promoCode);

			if (success) {
				this.bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ *${promoCode}* —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!`, {
					parse_mode: 'Markdown',
					reply_markup: {
						inline_keyboard: [
							[{ text: 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —â–µ –æ–¥–∏–Ω', callback_data: 'delete_promo' }],
							[{ text: '‚¨ÖÔ∏è –î–æ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤', callback_data: 'promo_menu' }]
						]
					}
				});
			} else {
				this.bot.sendMessage(chatId, `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ *${promoCode}*`, {
					parse_mode: 'Markdown',
					reply_markup: {
						inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'delete_promo' }]]
					}
				});
			}
		} catch (error) {
			console.error('Error deleting promo code:', error);
			this.bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É *${promoCode}*`, {
				parse_mode: 'Markdown'
			});
		}
	}

	// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω—å
	private isValidStatusTransition(currentStatus: OrderStatus, newStatus: OrderStatus): boolean {
		// –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤ (–Ω–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞—Ç—å)
		const validTransitions: Record<OrderStatus, OrderStatus[]> = {
			pending: ['confirmed', 'cancelled'], // –û—á—ñ–∫—É—î -> –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∞–±–æ –°–∫–∞—Å–æ–≤–∞–Ω–æ
			confirmed: ['shipped', 'cancelled'], // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ -> –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–±–æ –°–∫–∞—Å–æ–≤–∞–Ω–æ
			shipped: ['delivered'], // –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ -> –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
			delivered: [], // –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ - –∫—ñ–Ω—Ü–µ–≤–∏–π —Å—Ç–∞—Ç—É—Å
			cancelled: [] // –°–∫–∞—Å–æ–≤–∞–Ω–æ - –∫—ñ–Ω—Ü–µ–≤–∏–π —Å—Ç–∞—Ç—É—Å
		};

		return validTransitions[currentStatus]?.includes(newStatus) || false;
	}

	// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –ø—Ä–∏ –Ω–µ–¥–æ–∑–≤–æ–ª–µ–Ω–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥—ñ —Å—Ç–∞—Ç—É—Å—É
	private getStatusTransitionErrorMessage(
		currentStatus: OrderStatus,
		newStatus: OrderStatus
	): string {
		const statusNames = {
			pending: '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
			confirmed: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
			shipped: '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ',
			delivered: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
			cancelled: '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
		};

		const currentName = statusNames[currentStatus];
		const newName = statusNames[newStatus];

		let message = `‚ùå *–ù–µ–¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ —Å—Ç–∞—Ç—É—Å—É!*\n\n`;
		message += `–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: *${currentName}*\n`;
		message += `–ë–∞–∂–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å: *${newName}*\n\n`;

		// –î–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É –ø—Ä–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å
		switch (currentStatus) {
			case 'pending':
				message += `üí° –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ *–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏* –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ø–æ—Ç—ñ–º –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∞–±–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏.`;
				break;
			case 'confirmed':
				message += `üí° –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ *–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏* –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ø–æ—Ç—ñ–º –º–æ–∂–Ω–∞ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–µ.`;
				break;
			case 'shipped':
				message += `üí° –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–µ.`;
				break;
			case 'delivered':
			case 'cancelled':
				message += `üí° –¶–µ–π —Å—Ç–∞—Ç—É—Å —î –∫—ñ–Ω—Ü–µ–≤–∏–º —ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–º—ñ–Ω–µ–Ω–∏–π.`;
				break;
		}

		return message;
	}
}
