import type { Order } from '../../domain/interfaces/order.interface';

/**
 * Handles formatting of order-related messages
 */
export class OrderFormatter {
	/**
	 * Format a single order as a summary line
	 */
	formatOrderSummary(order: Order): string {
		const statusEmoji = this.getStatusEmoji(order.status);
		const date = new Date(order.createdAt).toLocaleDateString('uk-UA');
		const total = (order.total / 100).toFixed(2);

		return `${statusEmoji} ${order.id} - ${date} - ${total} ‚Ç¥`;
	}

	/**
	 * Format detailed order information
	 */
	formatOrderDetails(order: Order): string {
		const statusEmoji = this.getStatusEmoji(order.status);
		const statusText = this.getStatusText(order.status);
		const date = new Date(order.createdAt).toLocaleDateString('uk-UA');
		const total = (order.total / 100).toFixed(2);

		let message = `${statusEmoji} *–ó–ê–ú–û–í–õ–ï–ù–ù–Ø ${order.id}*\n\n`;
		message += `üìÖ –î–∞—Ç–∞: ${date}\n`;
		message += `üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n`;
		message += `üí∞ –°—É–º–∞: ${total} ‚Ç¥\n`;

		// Customer info
		if (order.customerName) {
			message += `üë§ –ö–ª—ñ—î–Ω—Ç: ${order.customerName}\n`;
		}
		if (order.customerPhone) {
			message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customerPhone}\n`;
		}

		// Items
		if (order.items && order.items.length > 0) {
			message += `\nüì¶ *–¢–æ–≤–∞—Ä–∏:*\n`;
			order.items.forEach((item, index) => {
				const price = (item.price / 100).toFixed(2);
				const itemTotal = (item.total / 100).toFixed(2);
				message += `${index + 1}. ${item.productName}\n`;
				message += `   ${item.quantity} —à—Ç. √ó ${price} ‚Ç¥ = ${itemTotal} ‚Ç¥\n`;
			});
		}

		// Delivery address
		if (order.deliveryAddress) {
			message += `\nüè† *–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:*\n`;
			message += this.formatDeliveryAddress(order.deliveryAddress);
		}

		// Notes
		if (order.notes) {
			message += `\nüìù *–ü—Ä–∏–º—ñ—Ç–∫–∏:* ${order.notes}`;
		}

		return message;
	}

	/**
	 * Format a list of orders
	 */
	formatOrderList(orders: Order[], title?: string): string {
		const titleText = title || `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è (${orders.length})`;

		if (orders.length === 0) {
			return `üì≠ –ù–µ–º–∞—î ${titleText.toLowerCase()}`;
		}

		let message = `üìã *${titleText}:*\n\n`;

		orders.forEach((order, index) => {
			if (index < 10) {
				// Limit to first 10
				message += this.formatOrderSummary(order) + '\n';
			}
		});

		if (orders.length > 10) {
			message += `\n... —Ç–∞ —â–µ ${orders.length - 10} –∑–∞–º–æ–≤–ª–µ–Ω—å`;
		}

		return message;
	}

	/**
	 * Format delivery address based on type
	 */
	private formatDeliveryAddress(address: any): string {
		// Check if it's Nova Poshta
		if (address.npWarehouse || address.npCityName || address.useNovaPost) {
			let novaPoshtaAddress = '';

			if (address.npCityFullName) {
				novaPoshtaAddress += `${address.npCityFullName}\n`;
			}

			if (address.npWarehouse) {
				novaPoshtaAddress += `–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ ‚Ññ${address.npWarehouse}\n`;
			}

			if (address.name && address.name !== '–ù–æ–≤–∞ –ü–æ—à—Ç–∞') {
				novaPoshtaAddress += `–û—Ç—Ä–∏–º—É–≤–∞—á: ${address.name}\n`;
			}

			return novaPoshtaAddress || '–ù–æ–≤–∞ –ü–æ—à—Ç–∞ (–¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ)';
		}

		// Regular address
		let regularAddress = '';

		if (address.street) {
			regularAddress += `${address.street}\n`;
		}
		if (address.city) {
			regularAddress += `${address.city}\n`;
		}
		if (address.postalCode) {
			regularAddress += `${address.postalCode}\n`;
		}
		if (address.name) {
			regularAddress += `–û—Ç—Ä–∏–º—É–≤–∞—á: ${address.name}\n`;
		}

		return regularAddress || '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
	}

	/**
	 * Get status emoji
	 */
	private getStatusEmoji(status: string): string {
		const emojiMap: Record<string, string> = {
			pending: '‚è≥',
			confirmed: '‚úÖ',
			shipped: 'üì¶',
			delivered: 'üöö',
			cancelled: '‚ùå'
		};
		return emojiMap[status] || '‚ùì';
	}

	/**
	 * Get status text in Ukrainian
	 */
	private getStatusText(status: string): string {
		const textMap: Record<string, string> = {
			pending: '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
			confirmed: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
			shipped: '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ',
			delivered: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
			cancelled: '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
		};
		return textMap[status] || status;
	}

	/**
	 * Format order status change notification
	 */
	formatStatusChange(orderId: string, oldStatus: string, newStatus: string): string {
		const oldEmoji = this.getStatusEmoji(oldStatus);
		const newEmoji = this.getStatusEmoji(newStatus);
		const newText = this.getStatusText(newStatus);

		return `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è *${orderId}* –æ–Ω–æ–≤–ª–µ–Ω–æ\n\n${oldEmoji} ‚Üí ${newEmoji} ${newText}`;
	}

	/**
	 * Format new order notification
	 */
	formatNewOrderNotification(order: Order): string {
		const total = (order.total / 100).toFixed(2);
		const createDate = new Date(order.createdAt).toLocaleString('uk-UA');

		let message = `üÜï *–ù–û–í–´–ô –ó–ê–ö–ê–ó ${order.id}*\n\n`;
		message += `üìÖ –í—Ä–µ–º—è: ${createDate}\n`;
		message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customerName || order.userId}\n`;
		message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customerPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
		message += `üí∞ –°—É–º–º–∞: ${total} ‚Ç¥\n`;
		message += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${order.items?.length || 0}\n\n`;

		// Add items summary
		if (order.items && order.items.length > 0) {
			message += `üõí *–°–æ—Å—Ç–∞–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n`;
			order.items.slice(0, 3).forEach((item, index) => {
				const price = (item.price / 100).toFixed(2);
				message += `${index + 1}. ${item.productName}\n`;
				message += `   ${item.quantity} —à—Ç.. √ó ${price} ‚Ç¥\n`;
			});

			if (order.items.length > 3) {
				message += `... —Ç–∞ —â–µ ${order.items.length - 3} —Ç–æ–≤–∞—Ä—ñ–≤\n`;
			}
			message += '\n';
		}

		message += `‚ö° *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!*`;

		return message;
	}
}
