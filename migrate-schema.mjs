import Database from 'better-sqlite3';
import { drizzle } from 'drizzle-orm/better-sqlite3';
import { config } from 'dotenv';

config();

const DATABASE_URL = process.env.DATABASE_URL;
if (!DATABASE_URL) throw new Error('DATABASE_URL is not set');

console.log('üîß Starting schema migration...');

const client = new Database(DATABASE_URL);
const db = drizzle(client);

try {
	console.log('üìã Current table structure:');
	const tableInfo = client.prepare('PRAGMA table_info(products)').all();
	console.table(tableInfo);

	console.log('\nüîÑ Starting migration...');

	// Drop unnecessary columns
	console.log('üóëÔ∏è Dropping unnecessary columns...');
	try {
		client.prepare('ALTER TABLE products DROP COLUMN name_en').run();
		console.log('‚úÖ Dropped name_en');
	} catch (e) {
		console.log('‚ÑπÔ∏è name_en column not found or already dropped');
	}

	try {
		client.prepare('ALTER TABLE products DROP COLUMN description_en').run();
		console.log('‚úÖ Dropped description_en');
	} catch (e) {
		console.log('‚ÑπÔ∏è description_en column not found or already dropped');
	}

	try {
		client.prepare('ALTER TABLE products DROP COLUMN size_en').run();
		console.log('‚úÖ Dropped size_en');
	} catch (e) {
		console.log('‚ÑπÔ∏è size_en column not found or already dropped');
	}

	try {
		client.prepare('ALTER TABLE products DROP COLUMN flavor_en').run();
		console.log('‚úÖ Dropped flavor_en');
	} catch (e) {
		console.log('‚ÑπÔ∏è flavor_en column not found or already dropped');
	}

	try {
		client.prepare('ALTER TABLE products DROP COLUMN label_color').run();
		console.log('‚úÖ Dropped label_color');
	} catch (e) {
		console.log('‚ÑπÔ∏è label_color column not found or already dropped');
	}

	// Update product names to English format
	console.log('\n‚úèÔ∏è Updating product names...');
	const updateNames = client.prepare(`
        UPDATE products 
        SET name = CASE 
            WHEN categories LIKE '%–ü–∞—Å—Ç–∏%' THEN 'Balance Botanica Golden Paste CBD'
            WHEN categories LIKE '%–û–ª—ñ—è%' THEN 'Balance Botanica CBD Oil'
            ELSE name
        END
    `);
	const result = updateNames.run();
	console.log(`‚úÖ Updated ${result.changes} product names`);

	// Update descriptions
	console.log('\n‚úèÔ∏è Updating descriptions...');
	const updateDescriptions = client.prepare(`
        UPDATE products 
        SET description = 'Premium CBD product for pets with natural ingredients and health benefits.'
        WHERE description IS NULL OR description = ''
    `);
	const descResult = updateDescriptions.run();
	console.log(`‚úÖ Updated ${descResult.changes} descriptions`);

	console.log('\nüìã New table structure:');
	const newTableInfo = client.prepare('PRAGMA table_info(products)').all();
	console.table(newTableInfo);

	console.log('\nüìä Sample data after migration:');
	const sampleData = client
		.prepare('SELECT id, name, size, flavor, categories FROM products LIMIT 3')
		.all();
	console.table(sampleData);

	console.log('\n‚úÖ Migration completed successfully!');
} catch (error) {
	console.error('‚ùå Migration failed:', error);
} finally {
	client.close();
}
